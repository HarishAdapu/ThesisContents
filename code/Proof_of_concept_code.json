[
    {
        "id": "93337e3d9ae6e9fc",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7307483e41bd5053",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fe3d6a013c5454d7",
        "type": "tab",
        "label": "User certificate",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b3202ac6a97ce6d4",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "589ed993f6793fb0",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c5c460aabd38fc6",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b946b3fcc466517",
        "type": "tab",
        "label": "usecase01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa4fa0540464be15",
        "type": "group",
        "z": "7307483e41bd5053",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ad2cd10491458692",
            "0cf63f3cbe44ffaf",
            "99bd1fee150a0bf0",
            "3368fb382a9aef63",
            "fe0351c05aa9b09a",
            "b312350a1ef0cde0",
            "1bacddb66771e6ca"
        ],
        "x": 34,
        "y": 459,
        "w": 952,
        "h": 182
    },
    {
        "id": "50bedf5a40b7f926",
        "type": "group",
        "z": "7307483e41bd5053",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fc238a1c41266a11",
            "ca9d56ed4f0fd545",
            "6102df822ac12f4a",
            "e69d3acec159dac4",
            "12a621a2a07161be",
            "afedf104db6da565",
            "c99efa0b746770ee",
            "082036b9d6354eef"
        ],
        "x": 34,
        "y": 639,
        "w": 572,
        "h": 362
    },
    {
        "id": "d777cedde0ee439a",
        "type": "group",
        "z": "7307483e41bd5053",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a34bd185540d584f",
            "46f4fa7c3782ce03",
            "1f95869c2980fc0d",
            "07cff0f4d23b3ce1",
            "db892faf5b558598",
            "101e39a6a798bc03",
            "e819371e237aea02",
            "415cad73ef0f000c",
            "da38d23ccf173148",
            "fb26a1b4f8af0089",
            "be714f71d5000651",
            "f97afeb38c36e573",
            "b4f1cfaf1cf77c56",
            "16b4a54d7d56b2e4",
            "284466397dbea963"
        ],
        "x": 8,
        "y": 1019,
        "w": 1038,
        "h": 442
    },
    {
        "id": "6798c7931dd4d33a",
        "type": "group",
        "z": "7307483e41bd5053",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "92d3ac818e7993f4",
            "66531a2407e6b61f",
            "1b97ad04a645d8ed",
            "67ebacd953a449fb",
            "60e6872a3019c108",
            "5f635d980456e226",
            "9c09b327df39ddf8",
            "85169c46959da12b",
            "35dbda2d22bd7483",
            "b5b9ae64908ed2fc",
            "bfc8fc32b883bad1",
            "ae07cb630e343c5e",
            "d188587f741b907a",
            "39ed07d44c983717",
            "85df7e7130fa53a0",
            "d16ebde685323e55",
            "62974df6392f3228",
            "ee48b6bddd9b14fa",
            "325b13429f4634ea",
            "c5c93523b4d5ce47",
            "6de0bc159c9d7d04",
            "0f506b1ae343ea5a",
            "14cc164deb277e0e",
            "f75cc256653c773e",
            "4d9c89ecd94e914b",
            "47b6714fd3889ab7",
            "2810fef8a9992427",
            "62a84b0de1d5633c"
        ],
        "x": -26,
        "y": 1519,
        "w": 892,
        "h": 502
    },
    {
        "id": "a88bf445781eb94e",
        "type": "group",
        "z": "7307483e41bd5053",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3aa92cca7ce9c426",
            "ed140952d6499957",
            "b25eaeca26b0ec5e",
            "c2c8cdf10bed7e9a",
            "7ab64bc9fa0c0da6"
        ],
        "x": 34,
        "y": 319,
        "w": 692,
        "h": 122
    },
    {
        "id": "c6caae2a4014b8c1",
        "type": "group",
        "z": "7307483e41bd5053",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d1c7d8351b55a383",
            "e0161cb39283cd36",
            "4faabc453da8c87f",
            "965d1a0d2056079a",
            "76662d0fcf328080",
            "86ee683287863c70",
            "8a9a2b1925801c0d",
            "e94f49fb1fabb074",
            "f926ad822b2dd9ed"
        ],
        "x": 34,
        "y": 19,
        "w": 932,
        "h": 282
    },
    {
        "id": "45db254b0e844511",
        "type": "group",
        "z": "b3202ac6a97ce6d4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "16e65f9db2c61986",
            "8d2650ec88014c04",
            "73a8c38d92a2ea43",
            "3e2b2c6389640eaf"
        ],
        "x": 1514,
        "y": 19,
        "w": 732,
        "h": 122
    },
    {
        "id": "129fd5b7ba4c920f",
        "type": "group",
        "z": "b3202ac6a97ce6d4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f7cc8664653a8e24",
            "67a3076fbf27a3a0",
            "e07f88398ca3e2b5",
            "6bda6e56f446a555",
            "c66e359dce7cb889",
            "bde0d3e1cb44b4aa",
            "e6400a3f040ef9fa",
            "cda805f584dcf398",
            "b5c7979a913e5c99",
            "96b5df62b8c86837",
            "dddcd59166e6c9cc",
            "4a6f0b09fe1089c5",
            "ee4df6eaaea0689a",
            "a72947e8a408fc07",
            "b66c30d5a33435d2",
            "fd333e9ffe3f2c37",
            "149c8cc9e9c594c6",
            "1c14176ee7818b2e",
            "b4594fc72b816fda",
            "909d6f110f91fada",
            "6ce7bb8b9e672741",
            "fa3e714df18a3fa9",
            "9f1721319ee358eb",
            "c4e15e7acb6b8ad6",
            "0d765638f78fca3f",
            "3a2f6b57091a7d21"
        ],
        "x": 114,
        "y": 1199,
        "w": 1472,
        "h": 702
    },
    {
        "id": "f023a2b58e3d43b5",
        "type": "group",
        "z": "589ed993f6793fb0",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "29a398643f1e8ac9",
            "421505d444aa346f",
            "3a0bd3be55b0600e",
            "c3c03366b666c9a3",
            "d0f30f9c6b362708",
            "817b43f7f7e86f2a",
            "c8e250da03515acd",
            "ed8184f3e5b548dc",
            "d36b65de59cd4a54",
            "9779ecb9ef319d0f",
            "7735479fc477c546",
            "22d76a1aced83418",
            "719b049d56cc59f0",
            "e1c22e7a4e68b64b",
            "aa068bd59bf1e109",
            "0fcaafb110bc5498",
            "96114c5792d908bd",
            "90c0ca958fc9a864",
            "41300a5cee1974c1",
            "b3d93af01dd7fd9d",
            "0f0b1a1da4ce3dde",
            "be781c400ce865c9",
            "d19aa0c556f87fdf",
            "e29ec162a77a9f58",
            "21d2450b7e77ea77",
            "4cd8f61c0413ffd4",
            "c8b95b4fe15264b8",
            "67374600b60664bb",
            "1ebe32afa6950840",
            "bb364861c6552972",
            "c3429c5ca78ba71f",
            "f53b61e5b44e7ecb",
            "a12ed7e5967d4453",
            "e5eb124ff23568c6",
            "8c471a741178a221",
            "c3763153c95e5fd8",
            "1f68553360b49d23",
            "adb33d5895573178",
            "09a2e65c4839ef1b",
            "1da1d8bed66e85a3",
            "495a718371aa4dc9",
            "e721878aa67dddb3",
            "88185d4244e2e8ee",
            "03ad30b60f8a9673",
            "1cfa77beb32f7518",
            "c83aff99d2470c9c",
            "e5eaa3e72b2fbf55",
            "bf4e831926df7f42",
            "439388548d2f44d0",
            "cb302a172cc8f5bc",
            "f00749ee86470e22",
            "499ca12b430cf1be",
            "b08014605b8b5f6d",
            "13c384f055e4b86b",
            "a3f38069041dcc77",
            "b6b8e73dfd229f65",
            "291efe2c0bc8e1b4",
            "5adb43ffac725903",
            "69ed850c566081f6",
            "d676d3ebde6e5997",
            "398030c2b46fa81e",
            "ac1833a010ba3ca4",
            "ea85a6e1e0e7a409",
            "ccbf22a6cbb44107",
            "ac9d849a45c23029",
            "6ae1d238674c9618",
            "f1c4646a43cc46dc",
            "c92361a296fb292f",
            "8aa8489608973929",
            "6be4707a8ec52ad5",
            "1ab33cfd31e4e415",
            "bdc86ef336911a18",
            "9f0b6b9590d6244c",
            "73330ecf426c040a",
            "9cbed141eee476bd",
            "3ff165b845263358",
            "59b483a8dc19c5c0",
            "e208d6b74a863b8d",
            "549b866b18c7e201",
            "312c1e9d7ded27ec",
            "821aaca333ac4c60"
        ],
        "x": 154,
        "y": 19,
        "w": 1692,
        "h": 1882
    },
    {
        "id": "49eb69489b0e82a7",
        "type": "group",
        "z": "93337e3d9ae6e9fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "02c31bb6eb1d5c93",
            "5aec4354462072c8",
            "bbee6c794c2fc6bd",
            "9efe28bc1bf8f2a9",
            "ba075b3e9b98fdce",
            "fb1a152f87434a0f",
            "c4462662d67146da"
        ],
        "x": 454,
        "y": 19,
        "w": 412,
        "h": 322
    },
    {
        "id": "be70995a3781bd0f",
        "type": "group",
        "z": "93337e3d9ae6e9fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b675f805d3546b49",
            "b6438a029b6d3759",
            "e7f299fc2876b513",
            "2b17110a2519c6c7",
            "2c90354077590f3c",
            "76bf78d4a616ee6d",
            "0d33acb1d4f390db",
            "ad1763784a3ffa57",
            "fb6d8be347770c1a",
            "de0c0c2fb34c31a7",
            "ed02f8622747c291"
        ],
        "x": 354,
        "y": 379,
        "w": 312,
        "h": 562
    },
    {
        "id": "5dfb6e43f93a23f1",
        "type": "group",
        "z": "93337e3d9ae6e9fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5cb01cbbc5911b6f",
            "9d4b13da852f4837",
            "7c49e11bae67073d",
            "d2cb908f95a74d96",
            "6abcf34acc115d04",
            "9328e8d7c7208a82",
            "0077189990c66553",
            "0bc4253685aa32ae",
            "b7612b6b765b0446",
            "94236f81a88e5d9f",
            "17deca451a9c032d"
        ],
        "x": 374,
        "y": 959,
        "w": 312,
        "h": 522
    },
    {
        "id": "14c128679f4e32b3",
        "type": "group",
        "z": "93337e3d9ae6e9fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "aeb87ebf9aa81441",
            "429694c790b0fb55",
            "fd5054ef9fa12d7e",
            "16fe69695e2650f6",
            "e5c1e4baebbbfd49",
            "46ac8b049fcc4ac1",
            "9ad7bd2852388b55",
            "6782dc21ab21a6b7",
            "19749b396ee6d612",
            "1684b282e6fcfa89",
            "275a3bc3a8d7fac0",
            "b0c133f30539744c",
            "886441e53fb3bb3c",
            "85dd05921c10c002",
            "ff1f589a8dbb8170",
            "5dd958fa852777d4",
            "139c14cb4386fc39",
            "12c5c1e87f026a4b",
            "cb8169f8772da240",
            "3f10653e6c484871",
            "d56532a2fb9d60a0",
            "6f582a343a3507ca",
            "37db76fe2154ddce",
            "50fe8fcb394e1e9d",
            "de41d69aa251a96c",
            "60b2d81795f4c35b"
        ],
        "x": 394,
        "y": 1519,
        "w": 332,
        "h": 1102
    },
    {
        "id": "710f2818cc204d9d",
        "type": "group",
        "z": "93337e3d9ae6e9fc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "22e38e101899619e",
            "0974ea31a2f0a3e4",
            "69956f213de2d179",
            "b366cef580623266",
            "406e7830cac657cd",
            "6a5f34e108b1adbf",
            "4caf551611e87691"
        ],
        "x": 394,
        "y": 2759,
        "w": 312,
        "h": 342
    },
    {
        "id": "da38d23ccf173148",
        "type": "group",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4d63f6fe14622db3",
            "ae0fc4f10bc77b1c",
            "3c418d1a724189ab",
            "4b8c183f1356284f"
        ],
        "x": 34,
        "y": 1179,
        "w": 872,
        "h": 142
    },
    {
        "id": "5ef3beb0ace0c65c",
        "type": "mqtt-broker",
        "name": "new_array_values_collection",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "13571b0e22f50a8f",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.5.99:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "7290d8b0.f713d8",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer",
        "login": false
    },
    {
        "id": "83439742.083188",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://0.0.0.0:4840/",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "894c6ff183e17d00",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://NB-W540-KON:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "d:/temp/DNA_client_selfSigned.pem",
        "userprivatekey": "d:/temp/private_key.pem"
    },
    {
        "id": "55fb29f2b0164ca1",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53888",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false,
        "usercert": true,
        "usercertificate": "C:/Users/karaimi/AppData/Roaming/node-red-opcua-nodejs/Config/UserPKI/UserCert_certificate.pem",
        "userprivatekey": "C:/Users/karaimi/AppData/Roaming/node-red-opcua-nodejs/Config/UserPKI/own/private/private_key.pem"
    },
    {
        "id": "0929a85a9d1010bc",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.5.99:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "cf36a658.95efb8",
        "type": "MySQLdatabase",
        "name": "",
        "host": "localhost",
        "port": "3306",
        "db": "sample_excel_database",
        "tz": "",
        "charset": ""
    },
    {
        "id": "1e555697710e9a1f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5364d221d2e82660",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "40cc300a6d311f4b",
        "type": "ui_group",
        "name": "All_Dashboard",
        "tab": "0a97cb40ecae36c5",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0a97cb40ecae36c5",
        "type": "ui_tab",
        "name": "All",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "23c43cd8f0ca65e4",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.5.99:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "68021f9.ba14de",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "6dfb4ae1.a93eec",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.3:4840",
        "secpol": "None",
        "secmode": "NONE",
        "login": false
    },
    {
        "id": "ae1976a4.2714e",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "trialdb",
        "tz": ""
    },
    {
        "id": "107cbd02fafd88c5",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://H7Q8Q13.vstage.co:53530/OPCUA/SimulationServer",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "62181c1a62e0fc9d",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://localhost:53881/",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "26aa8d673a96b561",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://opcuademo.sterfive.com:26543",
        "secpol": "None",
        "secmode": "None",
        "login": false
    },
    {
        "id": "38f03fdac5b70193",
        "type": "OpcUa-Endpoint",
        "endpoint": "opcua://localhost:53888",
        "secpol": "None",
        "secmode": "None",
        "login": false,
        "usercert": true,
        "usercertificate": "cert.pem",
        "userprivatekey": "key.pem"
    },
    {
        "id": "d483ac48b201166e",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.155.1:4840",
        "secpol": "None",
        "secmode": "None",
        "login": false,
        "info": "Siemens OPCUA\n"
    },
    {
        "id": "c280f55a.54a418",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://10.94.10.50:4840/",
        "secpol": "Basic256",
        "secmode": "SignAndEncrypt",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "3d5e0a8b3ba44822",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "34371338ed25fa23",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "172ab2c6cacf80eb",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": "1",
        "height": "1"
    },
    {
        "id": "b09240091c04a480",
        "type": "ui_tab",
        "name": "Rewinder Motor",
        "icon": "fa-bar-chart",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "525b7236d5dddc0d",
        "type": "ui_tab",
        "name": "Rewinder Motor Thresholds",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8fb5eaa2423094e0",
        "type": "ui_tab",
        "name": "Rewinder Motor Dashboards",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cb2b5ca06333b8d8",
        "type": "ui_group",
        "name": "Set Threshold Values to below Parameters",
        "tab": "7da5b907a128aa4d",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a187fc7b.b66018",
        "type": "MySQLdatabase",
        "name": "",
        "host": "localhost",
        "port": "3306",
        "db": "sample_excel_database",
        "tz": ""
    },
    {
        "id": "f6c3aafc.2923c8",
        "type": "MySQLdatabase",
        "name": "",
        "host": "localhost",
        "port": "3306",
        "db": "sample_excel_database",
        "tz": ""
    },
    {
        "id": "28a8c812325d0409",
        "type": "ui-group",
        "name": "Crossed Threshold Temperatures",
        "page": "",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d7d72b94bdcdfdf7",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "12a38bf29dbe41d3",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "f3c3f94ba5fb1a21",
        "type": "ui_group",
        "name": "Crossed Threshold Temperatures",
        "tab": "b09240091c04a480",
        "order": 2,
        "disp": true,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "28bfe79bdb17b8fe",
        "type": "ui_group",
        "name": "Threshold Values vs Time",
        "tab": "b09240091c04a480",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "58374364e6d47f7d",
        "type": "ui_group",
        "name": "Combined Threshold Values",
        "tab": "525b7236d5dddc0d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fdc43f03887da3f6",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "58374364e6d47f7d",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "82eba23b66ebee73",
        "type": "ui_tab",
        "name": "KnowledgeDatabase",
        "icon": "fa-database",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "82260d81f2872231",
        "type": "ui_group",
        "name": "New Value",
        "tab": "82eba23b66ebee73",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85a27feca851e911",
        "type": "ui_group",
        "name": "Repeated Warnings",
        "tab": "82eba23b66ebee73",
        "order": 1,
        "disp": true,
        "width": 26,
        "collapse": false,
        "className": ""
    },
    {
        "id": "76eb8cb92a8b11e7",
        "type": "ui_group",
        "name": "Update Errors",
        "tab": "82eba23b66ebee73",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "959fa78aa108123a",
        "type": "ui_group",
        "name": "Update form",
        "tab": "82eba23b66ebee73",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b715e2dabcd33237",
        "type": "ui_group",
        "name": "Category",
        "tab": "82eba23b66ebee73",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "81a55ec65f49ffe1",
        "type": "ui_group",
        "name": "Motor",
        "tab": "82eba23b66ebee73",
        "order": 7,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e98d3df7bede08cb",
        "type": "ui_group",
        "name": "EtherCAT",
        "tab": "82eba23b66ebee73",
        "order": 8,
        "disp": true,
        "width": 14,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b10a538170c2e6a",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "65273f24d6d97e2a",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "0a201baff2314f8a",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "9cea1a3dc96b51ec",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "85cc9cc99038618a",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "ea2f2a01d6e1ca44",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "941294b8d7ac95a9",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "9f27c3fce1eb8a50",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "c7ab42b4aff76f1e",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "a5a75bf3dadad12f",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "a1c0087c1378e8e4",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "cb2b5ca06333b8d8",
        "order": 14,
        "width": 2,
        "height": 1
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "name": "Files",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "053de9b2c6b6c091",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "b63d1f91.68095",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "5c57303689bd07c9",
        "type": "ui_tab",
        "name": "usecase01",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fb3e19ca99d7759c",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "5c57303689bd07c9",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "0469de013b063d3e",
        "type": "ui_group",
        "name": "Threshold values",
        "tab": "b09240091c04a480",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3560edf71eedc737",
        "type": "ui_group",
        "name": "statistical Graphs",
        "tab": "82eba23b66ebee73",
        "order": 11,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "402abb1e8613348e",
        "type": "ui_group",
        "name": "Add New Solution",
        "tab": "82eba23b66ebee73",
        "order": 3,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "301c1c1510d41896",
        "type": "ui_group",
        "name": "Motor Warnings",
        "tab": "82eba23b66ebee73",
        "order": 9,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "abc39d03ac6b07f2",
        "type": "ui_group",
        "name": "Past 5 Motor Solutions",
        "tab": "82eba23b66ebee73",
        "order": 10,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f7333a66184d09e1",
        "type": "ui_spacer",
        "z": "b3202ac6a97ce6d4",
        "name": "spacer",
        "group": "85a27feca851e911",
        "order": 2,
        "width": 26,
        "height": 1
    },
    {
        "id": "b459599b20bf7432",
        "type": "ui_spacer",
        "z": "b3202ac6a97ce6d4",
        "name": "spacer",
        "group": "85a27feca851e911",
        "order": 3,
        "width": 8,
        "height": 1
    },
    {
        "id": "47c5253a5e8ca06f",
        "type": "ui_spacer",
        "z": "b3202ac6a97ce6d4",
        "name": "spacer",
        "group": "85a27feca851e911",
        "order": 5,
        "width": 12,
        "height": 1
    },
    {
        "id": "d134fc6bfdb85932",
        "type": "ui_spacer",
        "z": "b3202ac6a97ce6d4",
        "name": "spacer",
        "group": "76eb8cb92a8b11e7",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "10da5f44ec3dcbc6",
        "type": "ui_spacer",
        "z": "b3202ac6a97ce6d4",
        "name": "spacer",
        "group": "959fa78aa108123a",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "4647b1a0.87d1b",
        "type": "MySQLdatabase",
        "name": "MySQL database",
        "host": "localhost",
        "port": "3306",
        "db": "your_database",
        "tz": ""
    },
    {
        "id": "f8a14d05.65f43",
        "type": "ui_group",
        "name": "Charts",
        "tab": "e8f3f1aa.46cd08",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e8f3f1aa.46cd08",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "1cc3ce362631c0eb",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "0469de013b063d3e",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "8aaa4eef5b5d34a0",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "0469de013b063d3e",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "5badeb4990e0fd1d",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "0469de013b063d3e",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "aab42c28d095dde2",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "0469de013b063d3e",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "ab4b5b34a2b5c884",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "f3c3f94ba5fb1a21",
        "order": 2,
        "width": 13,
        "height": 1
    },
    {
        "id": "df29cbe7a1c2a79f",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "f3c3f94ba5fb1a21",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "2cca09901659f941",
        "type": "ui_spacer",
        "z": "7307483e41bd5053",
        "name": "spacer",
        "group": "f3c3f94ba5fb1a21",
        "order": 7,
        "width": 13,
        "height": 1
    },
    {
        "id": "239e3fac89512be9",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "ALL",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "e7f299fc2876b513",
                "2b17110a2519c6c7",
                "2c90354077590f3c",
                "b6438a029b6d3759",
                "b675f805d3546b49",
                "02c31bb6eb1d5c93",
                "5cb01cbbc5911b6f",
                "9d4b13da852f4837",
                "7c49e11bae67073d",
                "6abcf34acc115d04",
                "d2cb908f95a74d96",
                "bbee6c794c2fc6bd",
                "5aec4354462072c8",
                "76bf78d4a616ee6d",
                "0d33acb1d4f390db",
                "b366cef580623266",
                "69956f213de2d179",
                "22e38e101899619e",
                "0974ea31a2f0a3e4",
                "406e7830cac657cd",
                "ad1763784a3ffa57",
                "9328e8d7c7208a82",
                "fb6d8be347770c1a",
                "9efe28bc1bf8f2a9",
                "ba075b3e9b98fdce",
                "de0c0c2fb34c31a7",
                "0077189990c66553",
                "94236f81a88e5d9f",
                "0bc4253685aa32ae",
                "b7612b6b765b0446",
                "fb1a152f87434a0f",
                "46ac8b049fcc4ac1",
                "aeb87ebf9aa81441",
                "429694c790b0fb55",
                "fd5054ef9fa12d7e",
                "e5c1e4baebbbfd49",
                "16fe69695e2650f6",
                "1684b282e6fcfa89",
                "6782dc21ab21a6b7",
                "19749b396ee6d612",
                "9ad7bd2852388b55",
                "ff1f589a8dbb8170",
                "886441e53fb3bb3c",
                "85dd05921c10c002",
                "b0c133f30539744c",
                "275a3bc3a8d7fac0",
                "12c5c1e87f026a4b",
                "5dd958fa852777d4",
                "3f10653e6c484871",
                "d56532a2fb9d60a0",
                "cb8169f8772da240",
                "139c14cb4386fc39",
                "50fe8fcb394e1e9d",
                "37db76fe2154ddce",
                "6f582a343a3507ca"
            ]
        ]
    },
    {
        "id": "36eed81379ab26bf",
        "type": "OpcUa-Client",
        "z": "93337e3d9ae6e9fc",
        "d": true,
        "endpoint": "0929a85a9d1010bc",
        "action": "subscribe",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "name": "",
        "x": 980,
        "y": 1120,
        "wires": [
            [
                "dfc628081316c4fa"
            ],
            []
        ]
    },
    {
        "id": "dfc628081316c4fa",
        "type": "join",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "52",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 1040,
        "wires": [
            [
                "d907a473541a8a93",
                "91defa427da7f04e"
            ]
        ]
    },
    {
        "id": "b7aa6f9cc46c1965",
        "type": "file",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "filename": "C:\\Users\\H.Adapureddi\\Desktop\\database\\new_parameters_case_00.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1320,
        "y": 540,
        "wires": [
            [
                "6a496a27c57ed6bf"
            ]
        ]
    },
    {
        "id": "cf563627b789cb71",
        "type": "function",
        "z": "93337e3d9ae6e9fc",
        "name": "function 5",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Define an array of variable keys\nvar variableKeys = [\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStateTransitionCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageRowsCount\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_iAlarmStorageClear\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderIdentMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title\"\n];\n\n// Create an empty array to store values\nvar dataArray = [];\n\n// Loop through variable keys and extract values\nvariableKeys.forEach(function (key) {\n    dataArray.push(payloadObj[key] || 0);\n});\n\n// Set the formatted array as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "6a496a27c57ed6bf",
        "type": "debug",
        "z": "93337e3d9ae6e9fc",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 460,
        "wires": []
    },
    {
        "id": "cbda79ebde8fc14a",
        "type": "mysql",
        "z": "93337e3d9ae6e9fc",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1830,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7406f94f042dcda8",
        "type": "function",
        "z": "93337e3d9ae6e9fc",
        "name": "Process Data and Insert into MySQL",
        "func": "// Split the payload by comma\nvar payloadValues = msg.payload.split(',');\n\n// Define table name\nvar tableName = 'new_variables_x4_remote_00';\n//var tableName = 'x4_variables_table';\n\n// Define column names and their data types\nvar columns = [];\npayloadValues.forEach(function (value, index) {\n    if (!isNaN(value)) { // Check if the value is a number\n        if (Number.isInteger(parseFloat(value))) {\n            columns.push(`Column_${index} INT`); // If it's an integer, define as INT\n        } else {\n            columns.push(`Column_${index} DOUBLE`); // If it's a float, define as DOUBLE\n        }\n    } else if (/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}Z$/.test(value)) { // Check if the value is a timestamp\n        columns.push(`Column_${index} TIMESTAMP`); // Define as TIMESTAMP\n    } else {\n        columns.push(`Column_${index} VARCHAR(255)`); // If it's a string, define as VARCHAR\n    }\n});\n\n// Define all the variable names (assuming they are in the same order as payloadValues)\nvar variableNames = [\n    \"g_lrX4ActWebTension\",\n    \"g_lrX4UnwinderDancerLowLimit\",\n    \"g_lrX4UnwinderActDancerPos\",\n    \"g_lrX4UnwinderDancerUpperLimit\",\n    \"g_lrX4SetWebTension\",\n    \"g_xX4UnwinderDancerOn\",\n\n    \"g_dwX4RewinderDriveErrorID\",\n    \"g_lrX4RewinderActMotorTemp\",\n    \"g_lrX4RewinderActPower\",\n    \"g_lrX4RewinderActTorque\",\n    \"g_lrX4RewinderActVel\",\n    \"g_lrX4RewinderActVoltage\",\n    \"g_lrX4RewinderActDiameter\",\n    \"g_lrX4RewinderSetTorque\",\n    \"g_lrX4RewinderSetVel\",\n    //\"g_tX4RewinderTimeStamp\",\n\n    \"g_dwX4UnwinderDriveErrorID\",\n    \"g_lrX4UnwinderActMotorTemp\",\n    \"g_lrX4UnwinderActPower\",\n    \"g_lrX4UnwinderActTorque\",\n    \"g_lrX4UnwinderActVel\",\n    \"g_lrX4UnwinderActVoltage\",\n    \"g_lrX4UnwinderActDiameter\",\n    \"g_lrX4UnwinderSetTorque\",\n    \"g_lrX4UnwinderSetVel\",\n    //\"g_tX4UnwinderTimeStamp\",\n\n    \"g_xX4RewinderAxisError\",\n    \"g_xX4RewinderAxisWarning\",\n    \"g_xX4RewinderDriveError\",\n    \"g_xX4RewinderDriveWarning\",\n    \"g_xX4RewinderError\",\n    \"g_xX4RewinderPowerOn\",\n    \"g_xX4RewinderQSPApplActive\",\n    \"g_xX4RewinderQSPDriveActive\",\n    \"g_xX4RewinderReadyForPowerOn\",\n    \"g_xX4RewinderSTOActive\",\n    \"g_xX4RewinderVoltageEnabled\",\n\n    \"g_xX4UnwinderAxisError\",\n    \"g_xX4UnwinderAxisWarning\",\n    \"g_xX4UnwinderDriveError\",\n    \"g_xX4UnwinderPowerOn\",\n    \"g_xX4UnwinderQSPApplActive\",\n    \"g_xX4UnwinderQSPDriveActive\",\n    \"g_xX4UnwinderSTOActive\",\n    \"g_xX4UnwinderReadyForPowerOn\",\n    \"g_xX4UnwinderxDancerMaxPos\",\n    \"g_xX4UnwinderxDancerMinPos\",\n    \"g_xX4UnwinderxDiamMax\",\n    \"g_xX4UnwinderxDiamMin\",\n    //\"g_xX4UnwinderxWindingBusy\",\n\n    //\"x4portal_ticket_alarmcode\",\n    \"x4portal_ticket_componentPath\",\n    \"x4portal_ticket_create\",\n    \"x4portal_ticket_description\",\n    \"x4portal_ticket_priority\",\n    \"x4portal_ticket_title\"\n];\n\n// Construct SQL query to insert data into the table\nvar insertDataQuery = `INSERT INTO ${tableName} (${variableNames.join(', ')}) VALUES (${Array(payloadValues.length).fill('?').join(', ')})`;\n\n// Set the SQL query and payload values in the message object\nmsg.topic = insertDataQuery;\nmsg.payload = payloadValues;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 660,
        "wires": [
            [
                "cbda79ebde8fc14a",
                "63ca5af65eaf7a51"
            ]
        ]
    },
    {
        "id": "9331a3f0c50c4b42",
        "type": "csv",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "g_AI_i201KF0_AI01, g_AI_i201KF0_AI02, g_AI_i201KF0_AI03, g_diAlarmStateTransitionCounter, g_diAlarmStorageCounter, g_diAlarmStorageRowsCount, g_iAlarmStorageClear, g_lrX4RewinderActMotorTemp, g_lrX4RewinderActPower, g_lrX4RewinderActTens, g_lrX4RewinderActTorque, g_lrX4RewinderActVel, g_lrX4RewinderActVoltage, g_lrX4RewinderIdentMInertia, g_lrX4RewinderMotorTempWarning, g_lrX4RewinderSetMInertia, g_lrX4RewinderSetTens, g_lrX4RewinderSetTorque, g_lrX4RewinderSetVel, g_lrX4UnwinderActDancerPos, g_lrX4UnwinderActMotorTemp, g_lrX4UnwinderActPower, g_lrX4UnwinderActTorque, g_lrX4UnwinderActVel, g_lrX4UnwinderActVoltage, g_lrX4UnwinderDancerLowLimit, g_lrX4UnwinderDancerUpperLimit, g_lrX4UnwinderMotorTempWarning, g_lrX4UnwinderSetTorque, g_lrX4UnwinderSetVel, x4portal_ticket_alarmcode, x4portal_ticket_componentPath, x4portal_ticket_create, x4portal_ticket_description, x4portal_ticket_priority, x4portal_ticket_title",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "b7aa6f9cc46c1965",
                "7406f94f042dcda8"
            ]
        ]
    },
    {
        "id": "d907a473541a8a93",
        "type": "debug",
        "z": "93337e3d9ae6e9fc",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1040,
        "wires": []
    },
    {
        "id": "63ca5af65eaf7a51",
        "type": "debug",
        "z": "93337e3d9ae6e9fc",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 860,
        "wires": []
    },
    {
        "id": "b675f805d3546b49",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActVoltage",
        "x": 500,
        "y": 660,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "b6438a029b6d3759",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActVel",
        "x": 480,
        "y": 620,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "f63395e9acc491ab",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 800,
        "wires": [
            [
                "b6438a029b6d3759"
            ]
        ]
    },
    {
        "id": "135c4501bf9f5d5d",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 840,
        "wires": [
            [
                "b675f805d3546b49"
            ]
        ]
    },
    {
        "id": "e7f299fc2876b513",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActMotorTemp",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "2b17110a2519c6c7",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActPower",
        "x": 490,
        "y": 540,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "2c90354077590f3c",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActTorque",
        "x": 490,
        "y": 580,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "84b8aa7da0ab878d",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "2c90354077590f3c"
            ]
        ]
    },
    {
        "id": "459038b301466cf0",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "e7f299fc2876b513"
            ]
        ]
    },
    {
        "id": "c179b11f24914b58",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "2b17110a2519c6c7"
            ]
        ]
    },
    {
        "id": "02c31bb6eb1d5c93",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActDancerPos",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "5cb01cbbc5911b6f",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActMotorTemp",
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "28c0e2830e194bce",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1540,
        "wires": [
            [
                "0077189990c66553"
            ]
        ]
    },
    {
        "id": "4d5a541203413109",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "02c31bb6eb1d5c93"
            ]
        ]
    },
    {
        "id": "f4764661d41ef3df",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1220,
        "wires": [
            [
                "5cb01cbbc5911b6f"
            ]
        ]
    },
    {
        "id": "5aec4354462072c8",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerUpperLimit",
        "x": 620,
        "y": 220,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "bbee6c794c2fc6bd",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerLowLimit",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "00654804a5b293fc",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "bbee6c794c2fc6bd"
            ]
        ]
    },
    {
        "id": "0013443cb4d841fc",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "5aec4354462072c8"
            ]
        ]
    },
    {
        "id": "9d4b13da852f4837",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActPower",
        "x": 510,
        "y": 1120,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "7c49e11bae67073d",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActTorque",
        "x": 510,
        "y": 1160,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "d2cb908f95a74d96",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActVoltage",
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "666e976f4b809d56",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1380,
        "wires": [
            [
                "d2cb908f95a74d96"
            ]
        ]
    },
    {
        "id": "1720d46892a76d89",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1260,
        "wires": [
            [
                "9d4b13da852f4837"
            ]
        ]
    },
    {
        "id": "6725ce3f16ee1b92",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1300,
        "wires": [
            [
                "7c49e11bae67073d"
            ]
        ]
    },
    {
        "id": "6abcf34acc115d04",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActVel",
        "x": 500,
        "y": 1200,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "11a403587b260409",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1340,
        "wires": [
            [
                "6abcf34acc115d04"
            ]
        ]
    },
    {
        "id": "22e38e101899619e",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "710f2818cc204d9d",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_description",
        "x": 560,
        "y": 2980,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "0974ea31a2f0a3e4",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "710f2818cc204d9d",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_priority",
        "x": 540,
        "y": 3020,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "69956f213de2d179",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "710f2818cc204d9d",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create",
        "datatype": "Boolean",
        "value": "",
        "name": "x4portal_ticket_create",
        "x": 560,
        "y": 2940,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "2ae1ce7f0a2a34a9",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2740,
        "wires": [
            [
                "69956f213de2d179"
            ]
        ]
    },
    {
        "id": "6330bd5273f144c8",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2780,
        "wires": [
            [
                "22e38e101899619e"
            ]
        ]
    },
    {
        "id": "93a107ec67ccdd59",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2820,
        "wires": [
            [
                "0974ea31a2f0a3e4"
            ]
        ]
    },
    {
        "id": "76bf78d4a616ee6d",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetTorque",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "0d33acb1d4f390db",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetVel",
        "x": 500,
        "y": 820,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "b366cef580623266",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "710f2818cc204d9d",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_componentPath",
        "x": 550,
        "y": 2900,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "bba57f521727aa34",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2700,
        "wires": [
            [
                "b366cef580623266"
            ]
        ]
    },
    {
        "id": "74753101f52982dc",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "76bf78d4a616ee6d"
            ]
        ]
    },
    {
        "id": "17565e0e4c870db1",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 960,
        "wires": [
            [
                "0d33acb1d4f390db"
            ]
        ]
    },
    {
        "id": "b3df1d3c6f843d12",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2660,
        "wires": [
            [
                "6a5f34e108b1adbf"
            ]
        ]
    },
    {
        "id": "406e7830cac657cd",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "710f2818cc204d9d",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_title",
        "x": 550,
        "y": 3060,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "909f02d30dddc490",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2860,
        "wires": [
            [
                "406e7830cac657cd"
            ]
        ]
    },
    {
        "id": "4f1b900b6dd49d52",
        "type": "debug",
        "z": "93337e3d9ae6e9fc",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 820,
        "wires": []
    },
    {
        "id": "ad1763784a3ffa57",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4RewinderDriveErrorID",
        "datatype": "Int32",
        "value": "",
        "name": "g_dwX4RewinderDriveErrorID",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "9328e8d7c7208a82",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4UnwinderDriveErrorID",
        "datatype": "UInt32",
        "value": "",
        "name": "g_dwX4UnwinderDriveErrorID",
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "172ac372c9192ea1",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "ad1763784a3ffa57"
            ]
        ]
    },
    {
        "id": "33e88e82ba3761c6",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "9328e8d7c7208a82"
            ]
        ]
    },
    {
        "id": "91defa427da7f04e",
        "type": "function",
        "z": "93337e3d9ae6e9fc",
        "name": "function 29",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Define an array of variable keys\nvar variableKeys = [\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4ActWebTension\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4SetWebTension\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderDancerOn\",\n\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4RewinderDriveErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActDiameter\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel\",\n    //\"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_tX4RewinderTimeStamp\",\n\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4UnwinderDriveErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDiameter\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel\",\n    //\"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_tX4UnwinderTimeStamp\",\n\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderAxisError\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderAxisWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderDriveError\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderDriveWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderError\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderPowerOn\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderQSPApplActive\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderQSPDriveActive\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderReadyForPowerOn\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderSTOActive\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderVoltageEnabled\",\n\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderAxisError\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderAxisWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderDriveError\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderPowerOn\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderQSPApplActive\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderQSPDriveActive\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderSTOActive\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderReadyForPowerOn\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDancerMaxPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDancerMinPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDiamMax\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDiamMin\",\n    //\"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxWindingBusy\",\n    \n    //\"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title\"\n];\n\n// Create an empty array to store values\nvar dataArray = [];\n\n// Loop through variable keys and extract values\nvariableKeys.forEach(function (key) {\n    dataArray.push(payloadObj[key] || 0);\n});\n\n// Set the formatted array as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 760,
        "wires": [
            [
                "9331a3f0c50c4b42",
                "4f1b900b6dd49d52"
            ]
        ]
    },
    {
        "id": "9efe28bc1bf8f2a9",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4ActWebTension",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4ActWebTension",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "6b8cf14bea4026d9",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 20,
        "wires": [
            [
                "9efe28bc1bf8f2a9"
            ]
        ]
    },
    {
        "id": "fb6d8be347770c1a",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActDiameter",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActDiameter",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "6872a872f68eb0ca",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "fb6d8be347770c1a"
            ]
        ]
    },
    {
        "id": "ba075b3e9b98fdce",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4SetWebTension",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4SetWebTension",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "e72148635adcef12",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "ba075b3e9b98fdce"
            ]
        ]
    },
    {
        "id": "b91a31d04fe0e3b4",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "0077189990c66553",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "d": true,
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_tX4UnwinderTimeStamp",
        "datatype": "DateTime",
        "value": "",
        "name": "g_tX4UnwinderTimeStamp",
        "x": 520,
        "y": 1440,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "de0c0c2fb34c31a7",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "d": true,
        "g": "be70995a3781bd0f",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_tX4RewinderTimeStamp",
        "datatype": "DateTime",
        "value": "",
        "name": "g_tX4RewinderTimeStamp",
        "x": 500,
        "y": 900,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "9480e524d92760a9",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "de0c0c2fb34c31a7"
            ]
        ]
    },
    {
        "id": "0bc4253685aa32ae",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderSetTorque",
        "x": 510,
        "y": 1360,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "b7612b6b765b0446",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderSetVel",
        "x": 520,
        "y": 1400,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "94236f81a88e5d9f",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDiameter",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActDiameter",
        "x": 520,
        "y": 1300,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "275a3bc3a8d7fac0",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderPowerOn",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderPowerOn",
        "x": 530,
        "y": 2220,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "672beef70588a197",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1460,
        "wires": [
            [
                "0bc4253685aa32ae"
            ]
        ]
    },
    {
        "id": "51d85917b279a670",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1420,
        "wires": [
            [
                "94236f81a88e5d9f"
            ]
        ]
    },
    {
        "id": "f092aed435658469",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1500,
        "wires": [
            [
                "b7612b6b765b0446"
            ]
        ]
    },
    {
        "id": "672b2a16b7ed447b",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2040,
        "wires": [
            [
                "9ad7bd2852388b55"
            ]
        ]
    },
    {
        "id": "7b7c9b8c5827b573",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1720,
        "wires": [
            [
                "aeb87ebf9aa81441"
            ]
        ]
    },
    {
        "id": "95a403bcb463853c",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1880,
        "wires": [
            [
                "16fe69695e2650f6"
            ]
        ]
    },
    {
        "id": "5161dfb33fdb0c84",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "429694c790b0fb55"
            ]
        ]
    },
    {
        "id": "2d33b3a944032d43",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1800,
        "wires": [
            [
                "fd5054ef9fa12d7e"
            ]
        ]
    },
    {
        "id": "b97a69972bba8016",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1840,
        "wires": [
            [
                "e5c1e4baebbbfd49"
            ]
        ]
    },
    {
        "id": "840ad6798f4df4fe",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "46ac8b049fcc4ac1"
            ]
        ]
    },
    {
        "id": "4ac2ad3f1aa0a7e7",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "6782dc21ab21a6b7"
            ]
        ]
    },
    {
        "id": "9beb3b4466ecffe8",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1920,
        "wires": [
            [
                "1684b282e6fcfa89"
            ]
        ]
    },
    {
        "id": "5c15bf8d3a13d016",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2000,
        "wires": [
            [
                "19749b396ee6d612"
            ]
        ]
    },
    {
        "id": "aeb87ebf9aa81441",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderAxisWarning",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderAxisWarning",
        "x": 540,
        "y": 1640,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "429694c790b0fb55",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderDriveError",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderDriveError",
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "fd5054ef9fa12d7e",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderDriveWarning",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderDriveWarning",
        "x": 540,
        "y": 1720,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "16fe69695e2650f6",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderPowerOn",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderPowerOn",
        "x": 530,
        "y": 1800,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "e5c1e4baebbbfd49",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderError",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderError",
        "x": 520,
        "y": 1760,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "46ac8b049fcc4ac1",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderAxisError",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderAxisError",
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "9ad7bd2852388b55",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderSTOActive",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderSTOActive",
        "x": 540,
        "y": 1960,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "6782dc21ab21a6b7",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderQSPDriveActive",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderQSPDriveActive",
        "x": 550,
        "y": 1880,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "19749b396ee6d612",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderReadyForPowerOn",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderReadyForPowerOn",
        "x": 560,
        "y": 1920,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "1684b282e6fcfa89",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderQSPApplActive",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderQSPApplActive",
        "x": 550,
        "y": 1840,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "b0c133f30539744c",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderDriveError",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderDriveError",
        "x": 530,
        "y": 2180,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "886441e53fb3bb3c",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderAxisError",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderAxisError",
        "x": 530,
        "y": 2100,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "85dd05921c10c002",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderAxisWarning",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderAxisWarning",
        "x": 540,
        "y": 2140,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "ff1f589a8dbb8170",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4RewinderVoltageEnabled",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4RewinderVoltageEnabled",
        "x": 550,
        "y": 2000,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "fb1a152f87434a0f",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderDancerOn",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderDancerOn",
        "x": 650,
        "y": 300,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "6248d4b25cb2be0c",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "fb1a152f87434a0f"
            ]
        ]
    },
    {
        "id": "5dd958fa852777d4",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderQSPDriveActive",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderQSPDriveActive",
        "x": 550,
        "y": 2300,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "139c14cb4386fc39",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDancerMinPos",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderxDancerMinPos",
        "x": 550,
        "y": 2460,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "12c5c1e87f026a4b",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderQSPApplActive",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderQSPApplActive",
        "x": 550,
        "y": 2260,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "cb8169f8772da240",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDancerMaxPos",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderxDancerMaxPos",
        "x": 550,
        "y": 2420,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "3f10653e6c484871",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderSTOActive",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderSTOActive",
        "x": 540,
        "y": 2340,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "d56532a2fb9d60a0",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderReadyForPowerOn",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderReadyForPowerOn",
        "x": 560,
        "y": 2380,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "6f582a343a3507ca",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "d": true,
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxWindingBusy",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderxWindingBusy",
        "x": 550,
        "y": 2580,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "37db76fe2154ddce",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDiamMin",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderxDiamMin",
        "x": 530,
        "y": 2540,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "50fe8fcb394e1e9d",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_xX4UnwinderxDiamMax",
        "datatype": "Boolean",
        "value": "",
        "name": "g_xX4UnwinderxDiamMax",
        "x": 540,
        "y": 2500,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "c8577dacaa4e086f",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2420,
        "wires": [
            [
                "139c14cb4386fc39"
            ]
        ]
    },
    {
        "id": "aee96435efabc801",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2100,
        "wires": [
            [
                "85dd05921c10c002"
            ]
        ]
    },
    {
        "id": "495480d2169f0ba1",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2260,
        "wires": [
            [
                "5dd958fa852777d4"
            ]
        ]
    },
    {
        "id": "90c57eda0a437aab",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2140,
        "wires": [
            [
                "b0c133f30539744c"
            ]
        ]
    },
    {
        "id": "7472dc951c387e5d",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2180,
        "wires": [
            [
                "275a3bc3a8d7fac0"
            ]
        ]
    },
    {
        "id": "665910797965244d",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2220,
        "wires": [
            [
                "12c5c1e87f026a4b"
            ]
        ]
    },
    {
        "id": "82617ff6b6fddf4f",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2080,
        "wires": [
            [
                "886441e53fb3bb3c"
            ]
        ]
    },
    {
        "id": "a126bf503961d94b",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2340,
        "wires": [
            [
                "d56532a2fb9d60a0"
            ]
        ]
    },
    {
        "id": "e63790413c3d514b",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2300,
        "wires": [
            [
                "3f10653e6c484871"
            ]
        ]
    },
    {
        "id": "0ee626d9f313dd98",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2380,
        "wires": [
            [
                "cb8169f8772da240"
            ]
        ]
    },
    {
        "id": "037ae11a8ed99f9d",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 2540,
        "wires": [
            [
                "6f582a343a3507ca"
            ]
        ]
    },
    {
        "id": "9eac226e2a0df56c",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2460,
        "wires": [
            [
                "50fe8fcb394e1e9d"
            ]
        ]
    },
    {
        "id": "99075030245ddf0e",
        "type": "inject",
        "z": "93337e3d9ae6e9fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2500,
        "wires": [
            [
                "37db76fe2154ddce"
            ]
        ]
    },
    {
        "id": "c4462662d67146da",
        "type": "comment",
        "z": "93337e3d9ae6e9fc",
        "g": "49eb69489b0e82a7",
        "name": "Dancer Parameters (Total 6)",
        "info": "",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "ed02f8622747c291",
        "type": "comment",
        "z": "93337e3d9ae6e9fc",
        "g": "be70995a3781bd0f",
        "name": "Rewinder Parameters (Total 10)",
        "info": "",
        "x": 510,
        "y": 420,
        "wires": []
    },
    {
        "id": "17deca451a9c032d",
        "type": "comment",
        "z": "93337e3d9ae6e9fc",
        "g": "5dfb6e43f93a23f1",
        "name": "Unwinder Parameters (Total 10)",
        "info": "",
        "x": 530,
        "y": 1000,
        "wires": []
    },
    {
        "id": "de41d69aa251a96c",
        "type": "comment",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "name": "Rewinder Warnings (Total 11)",
        "info": "",
        "x": 540,
        "y": 1560,
        "wires": []
    },
    {
        "id": "60b2d81795f4c35b",
        "type": "comment",
        "z": "93337e3d9ae6e9fc",
        "g": "14c128679f4e32b3",
        "name": "Unwinder Warnings (Total 13)",
        "info": "",
        "x": 540,
        "y": 2060,
        "wires": []
    },
    {
        "id": "6a5f34e108b1adbf",
        "type": "OpcUa-Item",
        "z": "93337e3d9ae6e9fc",
        "d": true,
        "g": "710f2818cc204d9d",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_alarmcode",
        "x": 550,
        "y": 2840,
        "wires": [
            [
                "36eed81379ab26bf"
            ]
        ]
    },
    {
        "id": "4caf551611e87691",
        "type": "comment",
        "z": "93337e3d9ae6e9fc",
        "g": "710f2818cc204d9d",
        "name": "X4 Parameters (6)",
        "info": "",
        "x": 530,
        "y": 2800,
        "wires": []
    },
    {
        "id": "3dc2d02cd63462aa",
        "type": "debug",
        "z": "93337e3d9ae6e9fc",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1140,
        "wires": []
    },
    {
        "id": "00e4c1ba0f27380a",
        "type": "function",
        "z": "93337e3d9ae6e9fc",
        "name": "function 32",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "ad2cd10491458692",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "name": "Rewinder Data",
        "func": "var query = \"SELECT * FROM rewindermotor;\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 500,
        "wires": [
            [
                "3368fb382a9aef63"
            ]
        ]
    },
    {
        "id": "aaeb1cf1c4501daa",
        "type": "function",
        "z": "7307483e41bd5053",
        "name": "Format tabale data as an Array",
        "func": "// Initialize an empty array to store row objects\nvar dataArray = [];\n\n// Process each row returned by the SQL query\nfor (var i = 0; i < msg.payload.length; i++) {\n    var row = msg.payload[i];\n    \n    // Create an object to store column data\n    var rowData = {\n        SerialNumber: row.SerialNumber,\n        Date: row.Date,\n        Time: row.Time,\n        MotorTemperature: row.MotorTemperature,\n        PowerConsumption: row.PowerConsumption,\n        Tension: row.Tension,\n        Torque: row.Torque,\n        Velocity: row.Velocity,\n        Voltage: row.Voltage,\n        DancerPosition: row.DancerPosition\n    };\n\n    // Push the row data object into the array\n    dataArray.push(rowData);\n}\n\n// Set the array containing each row data as the output message payload\nmsg.payload = dataArray;\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "0cf63f3cbe44ffaf",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "name": "All",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "ad2cd10491458692"
            ]
        ]
    },
    {
        "id": "a162c5c9637ceb9b",
        "type": "function",
        "z": "7307483e41bd5053",
        "name": "Split array into each element",
        "func": "// Iterate through each object in the array\nmsg.payload.forEach(function(item) {\n    // Process each object here\n    // For example, you can access properties of each object like item.property_name\n    //console.log(item);\n    \n    // Pass the processed object to the next node in the flow\n    node.send({payload: item});\n});\n\n// Return null to prevent the original array from being passed to the next node\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "99bd1fee150a0bf0",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "name": "Deviations from normal value",
        "func": "// Define normal values for each parameter\nconst normalValues = {\n    motorTemperature: 40,\n    powerConsumption: 25,\n    tension: 700,\n    torque: 60,\n    velocity: 8,\n    voltage: 420,\n    dancerPosition: 300\n};\n\n// Initialize an array to store deviations\nconst deviations = [];\n\n// Iterate over each object in the array and calculate deviation for each parameter\nfor (let i = 0; i < msg.payload.length; i++) {\n    const data = msg.payload[i];\n    const deviation = {};\n\n    // Include serial number, date, and time in the deviations object\n    deviation.serialNumber = data.SerialNumber;\n    deviation.date = data.Date;\n    deviation.time = data.Time;\n\n    // Calculate deviation for each parameter\n    deviation.motorTemperature = data.MotorTemperature - normalValues.motorTemperature;\n    deviation.powerConsumption = ((data.PowerConsumption - normalValues.powerConsumption) / normalValues.powerConsumption) * 100;\n    deviation.tension = ((data.Tension - normalValues.tension) / normalValues.tension) * 100;\n    deviation.torque = data.Torque - normalValues.torque;\n    deviation.velocity = ((data.Velocity - normalValues.velocity) / normalValues.velocity) * 100;\n    deviation.voltage = ((data.Voltage - normalValues.voltage) / normalValues.voltage) * 100;\n    deviation.dancerPosition = ((data.DancerPosition - normalValues.dancerPosition) / normalValues.dancerPosition) * 100;\n\n    // Push deviation to the deviations array\n    deviations.push(deviation);\n}\nmsg.payload = deviations;\n// Return the modified payload\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 580,
        "wires": [
            [
                "fe0351c05aa9b09a"
            ]
        ]
    },
    {
        "id": "3368fb382a9aef63",
        "type": "mysql",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": [
            [
                "99bd1fee150a0bf0",
                "1bacddb66771e6ca"
            ]
        ]
    },
    {
        "id": "f01e633b73638655",
        "type": "function",
        "z": "7307483e41bd5053",
        "name": "function 7",
        "func": "// Assuming msg.payload contains the array of objects\nlet payload = msg.payload;\n\n// Define arrays to store values of each column\nlet serialNumbers = [];\nlet dates = [];\nlet times = [];\nlet motorTemperatures = [];\nlet powerConsumptions = [];\nlet tensions = [];\nlet torques = [];\nlet velocities = [];\nlet voltages = [];\nlet dancerPositions = [];\n\n// Iterate over the array of objects\nfor (let i = 0; i < payload.length; i++) {\n    // Access each object\n    let obj = payload[i];\n    \n    // Push values of each column into respective arrays\n    serialNumbers.push(obj.SerialNumber);\n    dates.push(obj.Date);\n    times.push(obj.Time);\n    motorTemperatures.push(obj.MotorTemperature);\n    powerConsumptions.push(obj.PowerConsumption);\n    tensions.push(obj.Tension);\n    torques.push(obj.Torque);\n    velocities.push(obj.Velocity);\n    voltages.push(obj.Voltage);\n    dancerPositions.push(obj.DancerPosition);\n}\n\n// Now you have separate arrays containing values of individual columns\nconsole.log(\"Serial Numbers:\", serialNumbers);\nconsole.log(\"Dates:\", dates);\nconsole.log(\"Times:\", times);\nconsole.log(\"Motor Temperatures:\", motorTemperatures);\nconsole.log(\"Power Consumptions:\", powerConsumptions);\nconsole.log(\"Tensions:\", tensions);\nconsole.log(\"Torques:\", torques);\nconsole.log(\"Velocities:\", velocities);\nconsole.log(\"Voltages:\", voltages);\nconsole.log(\"Dancer Positions:\", dancerPositions);\n\n\n\n// Construct a new message object\nlet newMsg = {\n    payload: {\n        serialNumbers: serialNumbers,\n        dates: dates,\n        times: times,\n        motorTemperatures: motorTemperatures,\n        powerConsumptions: powerConsumptions,\n        tensions: tensions,\n        torques: torques,\n        velocities: velocities,\n        voltages: voltages,\n        dancerPositions: dancerPositions\n    }\n};\n\n// Send the new message object to the next node\nnode.send(newMsg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "d5b47b172be8c52c",
        "type": "function",
        "z": "7307483e41bd5053",
        "name": "Columns and their values",
        "func": "// Assuming msg.payload contains the array of objects\nlet payload = msg.payload;\n\n// Initialize empty objects to store values of each column\nlet columns = {};\n\n// Initialize an array to store deviations\nlet deviations = [];\n\n// Iterate over the array of objects\nfor (let i = 0; i < payload.length; i++) {\n    // Access each object\n    let obj = payload[i];\n    deviations.push(obj);\n\n    // Iterate over each property of the object\n    for (let key in obj) {\n        // Check if the property already exists in columns object\n        if (!columns[key]) {\n            // If not, initialize it as an empty array\n            columns[key] = [];\n        }\n\n        // Push the value of the property into the corresponding array\n        columns[key].push(obj[key]);\n    }\n}\n\n// Construct a new message object with columns as properties\nlet new_Msg = {\n    payload: columns,\n    deviations: deviations\n};\n\n// Return the new message object\nreturn new_Msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "fe0351c05aa9b09a",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "name": "columns and their values",
        "func": "// Assuming msg.payload contains the array of objects\nlet payload = msg.payload;\n\n// Initialize empty objects to store values of each column\nlet columns = {};\n\n// Iterate over the array of objects\nfor (let i = 0; i < payload.length; i++) {\n    // Access each object\n    let obj = payload[i];\n\n    // Iterate over each property of the object\n    for (let key in obj) {\n        // Check if the property already exists in columns object\n        if (!columns[key]) {\n            // If not, initialize it as an empty array\n            columns[key] = [];\n        }\n\n        // Push the value of the property into the corresponding array\n        columns[key].push(obj[key]);\n    }\n}\n\n// Store the columns object in the global context as deviations\ncontext.global.deviations = columns;\n\n// Construct a new message object with columns as properties\nlet newMsg = {\n    payload: columns,\n    deviations: columns, // Storing payload value in msg.deviations\n};\n\nflow.set(\"deviations\",newMsg.deviations)\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "b312350a1ef0cde0"
            ]
        ]
    },
    {
        "id": "fc238a1c41266a11",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_threshold_temperatures",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds\n    var crossedMaxTemp = [];\n    var crossedSerialNumbers = [];\n    var crossedDates = [];\n    var crossedTimes = [];\n\n    // Compare motorTemperature with TempMax\n    for (var i = 0; i < deviations.motorTemperature.length; i++) {\n        if (deviations.motorTemperature[i] > thresholds.TempMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxTemp.push(deviations.motorTemperature[i]);\n            crossedSerialNumbers.push(deviations.serialNumber[i]);\n            crossedDates.push(deviations.date[i]);\n            crossedTimes.push(deviations.time[i]);\n        }\n    }\n\n    // Log the crossed max values\n    console.log(\"Motor Temperatures that crossed TempMax:\", crossedMaxTemp);\n    console.log(\"Serial Numbers of crossed values:\", crossedSerialNumbers);\n    console.log(\"Dates of crossed values:\", crossedDates);\n    console.log(\"Times of crossed values:\", crossedTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxTemp = crossedMaxTemp.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxTemp:\", numberOfCrossedMaxTemp);\n\n    // You can further process or return the crossedMaxTemp array as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\n// Assign the variables to the message object\nmsg.crossedMaxTemp = crossedMaxTemp;\nmsg.crossedSerialNumbers = crossedSerialNumbers;\nmsg.crossedDates = crossedDates;\nmsg.crossedTimes = crossedTimes;\nmsg.numberOfCrossedMaxTemp = numberOfCrossedMaxTemp;\n\n// Set the variables in the flow\nflow.set(\"crossedMaxTemp\", msg.crossedMaxTemp);\nflow.set(\"crossedTempTimes\", msg.crossedTimes);\nflow.set(\"numberOfCrossedMaxTemp\", numberOfCrossedMaxTemp);\n\n// Return the message\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "b312350a1ef0cde0",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 560,
        "wires": []
    },
    {
        "id": "ca9d56ed4f0fd545",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "fc238a1c41266a11",
                "6102df822ac12f4a",
                "e69d3acec159dac4",
                "12a621a2a07161be",
                "afedf104db6da565",
                "c99efa0b746770ee",
                "082036b9d6354eef"
            ]
        ]
    },
    {
        "id": "6102df822ac12f4a",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_powerConsumption_thrshold",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds\n    var crossedMaxPower = [];\n    var crossedSerialNumbers = [];\n    var crossedDates = [];\n    var crossedTimes = [];\n\n    // Compare powerConsumption with PowMax\n    for (var i = 0; i < deviations.powerConsumption.length; i++) {\n        if (deviations.powerConsumption[i] > thresholds.PowMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxPower.push(deviations.powerConsumption[i]);\n            crossedSerialNumbers.push(deviations.serialNumber[i]);\n            crossedDates.push(deviations.date[i]);\n            crossedTimes.push(deviations.time[i]);\n        }\n    }\n\n    // Log the crossed max values\n    console.log(\"Power Consumption values that crossed PowMax:\", crossedMaxPower);\n    console.log(\"Serial Numbers of crossed values:\", crossedSerialNumbers);\n    console.log(\"Dates of crossed values:\", crossedDates);\n    console.log(\"Times of crossed values:\", crossedTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxPower = crossedMaxPower.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxPower:\", numberOfCrossedMaxPower);\n\n    // You can further process or return the crossedMaxPower array as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\nmsg.crossedMaxPower = crossedMaxPower;\nmsg.crossedSerialNumbers = crossedSerialNumbers;\nmsg.crossedDates = crossedDates;\nmsg.crossedTimes = crossedTimes;\nmsg.numberOfCrossedMaxPower = numberOfCrossedMaxPower;\n\nflow.set(\"crossedMaxPower\", msg.crossedMaxPower)\nflow.set(\"crossedPowerTimes\", msg.crossedTimes)\nflow.set(\"numberOfCrossedMaxPower\", msg.numberOfCrossedMaxPower);\n// Return the message\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e69d3acec159dac4",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_tensionMax_Thresholds",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds for powerConsumption and tension\n    var crossedMaxTension = [];\n    var crossedTensionSerialNumbers = [];\n    var crossedTensionDates = [];\n    var crossedTensionTimes = [];\n\n    // Compare tension with TensionMax\n    for (var j = 0; j < deviations.tension.length; j++) {\n        if (deviations.tension[j] > thresholds.TensionMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxTension.push(deviations.tension[j]);\n            crossedTensionSerialNumbers.push(deviations.serialNumber[j]);\n            crossedTensionDates.push(deviations.date[j]);\n            crossedTensionTimes.push(deviations.time[j]);\n        }\n    }\n\n    console.log(\"Tension that crossed TensionMax:\", crossedMaxTension);\n    console.log(\"Serial Numbers of crossed Tension values:\", crossedTensionSerialNumbers);\n    console.log(\"Dates of crossed Tension values:\", crossedTensionDates);\n    console.log(\"Times of crossed Tension values:\", crossedTensionTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxTension = crossedMaxTension.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxTemp:\", numberOfCrossedMaxTension);\n\n\n    // You can further process or return the crossed arrays as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\n// Add crossed arrays to the msg object\n\nmsg.crossedMaxTension = crossedMaxTension;\nmsg.crossedTensionSerialNumbers = crossedTensionSerialNumbers;\nmsg.crossedTensionDates = crossedTensionDates;\nmsg.crossedTensionTimes = crossedTensionTimes;\nmsg.numberOfCrossedMaxTension = numberOfCrossedMaxTension\n\nflow.set(\"crossedMaxTension\",msg.crossedMaxTension)\nflow.set(\"crossedTensionTimes\",msg.crossedTensionTimes)\nflow.set(\"numberOfCrossedMaxTension\", msg.numberOfCrossedMaxTension);\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "12a621a2a07161be",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_torqueMax_Thresholds",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds for torque\n    var crossedMaxTorque = [];\n    var crossedTorqueSerialNumbers = [];\n    var crossedTorqueDates = [];\n    var crossedTorqueTimes = [];\n\n    // Compare torque with TorqueMax\n    for (var i = 0; i < deviations.torque.length; i++) {\n        if (deviations.torque[i] > thresholds.TorqueMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxTorque.push(deviations.torque[i]);\n            crossedTorqueSerialNumbers.push(deviations.serialNumber[i]);\n            crossedTorqueDates.push(deviations.date[i]);\n            crossedTorqueTimes.push(deviations.time[i]);\n        }\n    }\n\n    // Log the crossed max values for torque\n    console.log(\"Torque that crossed TorqueMax:\", crossedMaxTorque);\n    console.log(\"Serial Numbers of crossed Torque values:\", crossedTorqueSerialNumbers);\n    console.log(\"Dates of crossed Torque values:\", crossedTorqueDates);\n    console.log(\"Times of crossed Torque values:\", crossedTorqueTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxTorque = crossedMaxTorque.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxTemp:\", numberOfCrossedMaxTorque);\n\n\n    // You can further process or return the crossed arrays as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\n// Add crossed arrays to the msg object\nmsg.crossedMaxTorque = crossedMaxTorque;\nmsg.crossedTorqueSerialNumbers = crossedTorqueSerialNumbers;\nmsg.crossedTorqueDates = crossedTorqueDates;\nmsg.crossedTorqueTimes = crossedTorqueTimes;\nmsg.numberOfCrossedMaxTorque = numberOfCrossedMaxTorque;\n\nflow.set(\"crossedMaxTorque\",msg.crossedMaxTorque)\nflow.set(\"crossedTorqueTimes\",msg.crossedTorqueTimes)\nflow.set(\"numberOfCrossedMaxTorque\", msg.numberOfCrossedMaxTorque);\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "afedf104db6da565",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_velocityMax_Thresholds",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds for velocity\n    var crossedMaxVelocity = [];\n    var crossedVelocitySerialNumbers = [];\n    var crossedVelocityDates = [];\n    var crossedVelocityTimes = [];\n\n    // Compare velocity with VelocityMax\n    for (var i = 0; i < deviations.velocity.length; i++) {\n        if (deviations.velocity[i] > thresholds.VelocityMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxVelocity.push(deviations.velocity[i]);\n            crossedVelocitySerialNumbers.push(deviations.serialNumber[i]);\n            crossedVelocityDates.push(deviations.date[i]);\n            crossedVelocityTimes.push(deviations.time[i]);\n        }\n    }\n\n    // Log the crossed max values for velocity\n    console.log(\"Velocity that crossed VelocityMax:\", crossedMaxVelocity);\n    console.log(\"Serial Numbers of crossed Velocity values:\", crossedVelocitySerialNumbers);\n    console.log(\"Dates of crossed Velocity values:\", crossedVelocityDates);\n    console.log(\"Times of crossed Velocity values:\", crossedVelocityTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxVelocity = crossedMaxVelocity.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxVelocity:\", numberOfCrossedMaxVelocity);\n\n\n    // You can further process or return the crossed arrays as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\n// Add crossed arrays to the msg object\nmsg.crossedMaxVelocity = crossedMaxVelocity;\nmsg.crossedVelocitySerialNumbers = crossedVelocitySerialNumbers;\nmsg.crossedVelocityDates = crossedVelocityDates;\nmsg.crossedVelocityTimes = crossedVelocityTimes;\nmsg.numberOfCrossedMaxVelocity = numberOfCrossedMaxVelocity;\n\nflow.set(\"crossedMaxVelocity\",msg.crossedMaxVelocity)\nflow.set(\"crossedVelocityTimes\",msg.crossedVelocityTimes)\nflow.set(\"numberOfCrossedMaxVelocity\", msg.numberOfCrossedMaxVelocity);\n\n// Return the message\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "c99efa0b746770ee",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_voltageMax_Thresholds",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds for voltage\n    var crossedMaxVoltage = [];\n    var crossedVoltageSerialNumbers = [];\n    var crossedVoltageDates = [];\n    var crossedVoltageTimes = [];\n\n    // Compare voltage with VoltageMax\n    for (var i = 0; i < deviations.voltage.length; i++) {\n        if (deviations.voltage[i] > thresholds.VoltageMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxVoltage.push(deviations.voltage[i]);\n            crossedVoltageSerialNumbers.push(deviations.serialNumber[i]);\n            crossedVoltageDates.push(deviations.date[i]);\n            crossedVoltageTimes.push(deviations.time[i]);\n        }\n    }\n\n    // Log the crossed max values for voltage\n    console.log(\"Voltage that crossed VoltageMax:\", crossedMaxVoltage);\n    console.log(\"Serial Numbers of crossed Voltage values:\", crossedVoltageSerialNumbers);\n    console.log(\"Dates of crossed Voltage values:\", crossedVoltageDates);\n    console.log(\"Times of crossed Voltage values:\", crossedVoltageTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxVoltage = crossedMaxVoltage.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxTemp:\", numberOfCrossedMaxVoltage);\n\n\n    // You can further process or return the crossed arrays as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\n// Add crossed arrays to the msg object\nmsg.crossedMaxVoltage = crossedMaxVoltage;\nmsg.crossedVoltageSerialNumbers = crossedVoltageSerialNumbers;\nmsg.crossedVoltageDates = crossedVoltageDates;\nmsg.crossedVoltageTimes = crossedVoltageTimes;\nmsg.numberOfCrossedMaxVoltage = numberOfCrossedMaxVoltage;\n\nflow.set(\"crossedMaxVoltage\",msg.crossedMaxVoltage)\nflow.set(\"crossedVoltageTimes\",msg.crossedVoltageTimes)\nflow.set(\"numberOfCrossedMaxVoltage\", msg.numberOfCrossedMaxVoltage);\n// Return the message\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "082036b9d6354eef",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "50bedf5a40b7f926",
        "name": "Crossed_DancerMax_Thresholds",
        "func": "// Get the flow variables\nvar deviations = flow.get(\"deviations\");\nvar thresholds = flow.get(\"thresholds\");\n\n// Check if the variables are defined\nif (deviations && thresholds) {\n    // Define arrays to store values that crossed the max thresholds for dancerPosition\n    var crossedMaxDancerPosition = [];\n    var crossedDancerPositionSerialNumbers = [];\n    var crossedDancerPositionDates = [];\n    var crossedDancerPositionTimes = [];\n\n    // Compare dancerPosition with DancerMax\n    for (var i = 0; i < deviations.dancerPosition.length; i++) {\n        if (deviations.dancerPosition[i] > thresholds.DancerMax) {\n            // Store the value if it crossed the max threshold\n            crossedMaxDancerPosition.push(deviations.dancerPosition[i]);\n            crossedDancerPositionSerialNumbers.push(deviations.serialNumber[i]);\n            crossedDancerPositionDates.push(deviations.date[i]);\n            crossedDancerPositionTimes.push(deviations.time[i]);\n        }\n    }\n\n    // Log the crossed max values for dancerPosition\n    console.log(\"Dancer Position that crossed DancerMax:\", crossedMaxDancerPosition);\n    console.log(\"Serial Numbers of crossed Dancer Position values:\", crossedDancerPositionSerialNumbers);\n    console.log(\"Dates of crossed Dancer Position values:\", crossedDancerPositionDates);\n    console.log(\"Times of crossed Dancer Position values:\", crossedDancerPositionTimes);\n\n    // Calculate the number of elements in crossedMaxTemp\n    var numberOfCrossedMaxDancerPosition = crossedMaxDancerPosition.length;\n\n    // Log the number of elements in crossedMaxTemp\n    console.log(\"Number of elements in crossedMaxTemp:\", numberOfCrossedMaxDancerPosition);\n\n\n    // You can further process or return the crossed arrays as needed\n\n} else {\n    console.log(\"Flow variables are not defined.\");\n}\n\n// Add crossed arrays to the msg object\nmsg.crossedMaxDancerPosition = crossedMaxDancerPosition;\nmsg.crossedDancerPositionSerialNumbers = crossedDancerPositionSerialNumbers;\nmsg.crossedDancerPositionDates = crossedDancerPositionDates;\nmsg.crossedDancerPositionTimes = crossedDancerPositionTimes;\nmsg.numberOfCrossedMaxDancerPosition = numberOfCrossedMaxDancerPosition;\n\nflow.set(\"crossedMaxDancer\",msg.crossedMaxDancerPosition)\nflow.set(\"crossedDancerTimes\",msg.crossedDancerPositionTimes)\nflow.set(\"numberOfCrossedMaxDancerPosition\", msg.numberOfCrossedMaxDancerPosition);\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "d2bfb4a3483428ca",
        "type": "function",
        "z": "7307483e41bd5053",
        "name": "function 10",
        "func": "// Extract data from global variables\nvar crossedMaxTemp = flow.get(\"crossedMaxTemp\");\n\nvar crossedTempTimes = flow.get(\"crossedTempTimes\");\n\nvar crossedMaxPower = flow.get(\"crossedMaxPower\");\nvar crossedPowerTimes = flow.get(\"crossedPowerTimes\");\n\nvar crossedMaxTension = flow.get(\"crossedMaxTension\");\nvar crossedTensionTimes = flow.get(\"crossedTensionTimes\");\n\nvar crossedMaxTorque = flow.get(\"crossedMaxTorque\");\nvar crossedTorqueTimes = flow.get(\"crossedTorqueTimes\");\n\nvar crossedMaxVelocity = flow.get(\"crossedMaxVelocity\");\nvar crossedVelocityTimes = flow.get(\"crossedVelocityTimes\");\n\nvar crossedMaxVoltage = flow.get(\"crossedMaxVoltage\");\nvar crossedVoltageTimes = flow.get(\"crossedVoltageTimes\");\n\nvar crossedMaxDancer = flow.get(\"crossedMaxDancer\");\nvar crossedDancerTimes = flow.get(\"crossedDancerTimes\");\n\n// Create an array to store the data points for the chart\nvar chartData = [];\n\n// Function to create data points for a specific variable\nfunction createDataPoints(xValues, timeValues, zValue) {\n    for (var i = 0; i < timeValues.length; i++) {\n        var dataPoint = {\n            x: xValues[i],\n            time: timeValues[i],\n            z: zValue\n        };\n        chartData.push(dataPoint);\n    }\n}\n\n// Call the function for each variable with respective values\ncreateDataPoints(flow.get(\"crossedMaxTemp\"), flow.get(\"crossedTempTimes\"), \"temp\");\ncreateDataPoints(flow.get(\"crossedMaxPower\"), flow.get(\"crossedPowerTimes\"), \"power\");\ncreateDataPoints(flow.get(\"crossedMaxTension\"), flow.get(\"crossedTensionTimes\"), \"tension\");\ncreateDataPoints(flow.get(\"crossedMaxTorque\"), flow.get(\"crossedTorqueTimes\"), \"torque\");\ncreateDataPoints(flow.get(\"crossedMaxVelocity\"), flow.get(\"crossedVelocityTimes\"), \"velocity\");\ncreateDataPoints(flow.get(\"crossedMaxVoltage\"), flow.get(\"crossedVoltageTimes\"), \"voltage\");\ncreateDataPoints(flow.get(\"crossedMaxDancer\"), flow.get(\"crossedDancerTimes\"), \"dancer\");\n\n// Prepare the message object to be sent to the chart node\nmsg.payload = chartData;\n\n// Return the message object\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 760,
        "wires": [
            [
                "72a461697abe35be",
                "32ab89c16b8638ab"
            ]
        ]
    },
    {
        "id": "d563287209e8ef06",
        "type": "change",
        "z": "7307483e41bd5053",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.z",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.x",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 860,
        "wires": [
            [
                "0998503ecef391cc",
                "e5b3524850b7333a"
            ]
        ]
    },
    {
        "id": "72a461697abe35be",
        "type": "split",
        "z": "7307483e41bd5053",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 760,
        "wires": [
            [
                "d563287209e8ef06",
                "b7bd11e579a4ce47"
            ]
        ]
    },
    {
        "id": "0998503ecef391cc",
        "type": "ui_chart",
        "z": "7307483e41bd5053",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Parameters ",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1070,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "7f649212c5fc9d7f",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Show data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 710,
        "y": 800,
        "wires": [
            [
                "d2bfb4a3483428ca"
            ]
        ]
    },
    {
        "id": "694fb685cc6d8534",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 760,
        "wires": [
            [
                "0998503ecef391cc"
            ]
        ]
    },
    {
        "id": "f327e9407a316cdd",
        "type": "inject",
        "z": "7307483e41bd5053",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 740,
        "y": 700,
        "wires": [
            [
                "d2bfb4a3483428ca"
            ]
        ]
    },
    {
        "id": "b7bd11e579a4ce47",
        "type": "debug",
        "z": "7307483e41bd5053",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "e5b3524850b7333a",
        "type": "debug",
        "z": "7307483e41bd5053",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 900,
        "wires": []
    },
    {
        "id": "32ab89c16b8638ab",
        "type": "debug",
        "z": "7307483e41bd5053",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 680,
        "wires": []
    },
    {
        "id": "a34bd185540d584f",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "function 11",
        "func": "// Get the data from flow variables\nvar numberOfCrossedMaxVoltage = flow.get(\"numberOfCrossedMaxVoltage\");\nvar numberOfCrossedMaxVelocity = flow.get(\"numberOfCrossedMaxVelocity\");\nvar numberOfCrossedMaxTorque = flow.get(\"numberOfCrossedMaxTorque\");\nvar numberOfCrossedMaxTension = flow.get(\"numberOfCrossedMaxTension\");\nvar numberOfCrossedMaxPower = flow.get(\"numberOfCrossedMaxPower\");\nvar numberOfCrossedMaxTemp = flow.get(\"numberOfCrossedMaxTemp\");\n\n// Extract data from global variables\nvar crossedMaxTemp = flow.get(\"crossedMaxTemp\");\nvar crossedTempTimes = flow.get(\"crossedTempTimes\");\nvar crossedMaxPower = flow.get(\"crossedMaxPower\");\nvar crossedPowerTimes = flow.get(\"crossedPowerTimes\");\nvar crossedMaxTension = flow.get(\"crossedMaxTension\");\nvar crossedTensionTimes = flow.get(\"crossedTensionTimes\");\nvar crossedMaxTorque = flow.get(\"crossedMaxTorque\");\nvar crossedTorqueTimes = flow.get(\"crossedTorqueTimes\");\nvar crossedMaxVelocity = flow.get(\"crossedMaxVelocity\");\nvar crossedVelocityTimes = flow.get(\"crossedVelocityTimes\");\nvar crossedMaxVoltage = flow.get(\"crossedMaxVoltage\");\nvar crossedVoltageTimes = flow.get(\"crossedVoltageTimes\");\nvar crossedMaxDancer = flow.get(\"crossedMaxDancer\");\nvar crossedDancerTimes = flow.get(\"crossedDancerTimes\");\n\n// Create an array of objects representing data points\nvar chartData = [\n    { label: \"Voltage\", value: numberOfCrossedMaxVoltage, new: [crossedMaxVoltage, crossedVoltageTimes] },\n    { label: \"Velocity\", value: numberOfCrossedMaxVelocity, new: [crossedMaxVelocity, crossedVelocityTimes] },\n    { label: \"Torque\", value: numberOfCrossedMaxTorque, new: [crossedMaxTorque, crossedTorqueTimes] },\n    { label: \"Tension\", value: numberOfCrossedMaxTension, new: [crossedMaxTension, crossedTensionTimes] },\n    { label: \"Power\", value: numberOfCrossedMaxPower, new: [crossedMaxPower, crossedPowerTimes] },\n    { label: \"Temperature\", value: numberOfCrossedMaxTemp, new: [crossedMaxTemp, crossedTempTimes] }\n];\n\n// Assign the formatted data to msg.payload\nmsg.payload = chartData;\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1060,
        "wires": [
            [
                "46f4fa7c3782ce03",
                "101e39a6a798bc03"
            ]
        ]
    },
    {
        "id": "46f4fa7c3782ce03",
        "type": "split",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 1120,
        "wires": [
            [
                "1f95869c2980fc0d"
            ]
        ]
    },
    {
        "id": "1f95869c2980fc0d",
        "type": "change",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.label",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 1120,
        "wires": [
            [
                "db892faf5b558598",
                "16b4a54d7d56b2e4"
            ]
        ]
    },
    {
        "id": "07cff0f4d23b3ce1",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "a34bd185540d584f"
            ]
        ]
    },
    {
        "id": "db892faf5b558598",
        "type": "ui_chart",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "group": "f3c3f94ba5fb1a21",
        "order": 3,
        "width": 13,
        "height": 5,
        "label": "Parameters vs No.of Times exceeded the threshold",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "101e39a6a798bc03",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e819371e237aea02",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "group": "f3c3f94ba5fb1a21",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Show data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "a34bd185540d584f"
            ]
        ]
    },
    {
        "id": "415cad73ef0f000c",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "group": "f3c3f94ba5fb1a21",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 690,
        "y": 1120,
        "wires": [
            [
                "db892faf5b558598"
            ]
        ]
    },
    {
        "id": "4d63f6fe14622db3",
        "type": "ui_table",
        "z": "7307483e41bd5053",
        "g": "da38d23ccf173148",
        "group": "f3c3f94ba5fb1a21",
        "name": "Exceeded Threshold Values vs No.of Times it Occured",
        "order": 1,
        "width": 13,
        "height": 5,
        "columns": [
            {
                "field": "Name",
                "title": "Parameter",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "number",
                "title": "No.of. Times",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 680,
        "y": 1220,
        "wires": []
    },
    {
        "id": "ae0fc4f10bc77b1c",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "da38d23ccf173148",
        "name": "function 12",
        "func": "// Get the data from flow variables\nvar numberOfCrossedMaxVoltage = flow.get(\"numberOfCrossedMaxVoltage\");\nvar numberOfCrossedMaxVelocity = flow.get(\"numberOfCrossedMaxVelocity\");\nvar numberOfCrossedMaxTorque = flow.get(\"numberOfCrossedMaxTorque\");\nvar numberOfCrossedMaxTension = flow.get(\"numberOfCrossedMaxTension\");\nvar numberOfCrossedMaxPower = flow.get(\"numberOfCrossedMaxPower\");\nvar numberOfCrossedMaxTemp = flow.get(\"numberOfCrossedMaxTemp\");\nvar crossedDancerTimes = flow.get(\"crossedDancerTimes\");\n\nmsg.payload = [\n    {\n        \"Name\": \"Temperature\",\n        \"number\": numberOfCrossedMaxTemp,\n    },\n    {\n        \"Name\": \"Voltage\",\n        \"number\": numberOfCrossedMaxVoltage,\n    },\n    {\n        \"Name\": \"Velocity\",\n        \"number\": numberOfCrossedMaxVelocity,\n    },\n    {\n        \"Name\": \"Torque\",\n        \"number\": numberOfCrossedMaxTorque,\n    },\n    {\n        \"Name\": \"Tension\",\n        \"number\": numberOfCrossedMaxTension,\n    },\n    {\n        \"Name\": \"Power\",\n        \"number\": numberOfCrossedMaxPower,\n    },\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1220,
        "wires": [
            [
                "4d63f6fe14622db3",
                "4b8c183f1356284f"
            ]
        ]
    },
    {
        "id": "3c418d1a724189ab",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "da38d23ccf173148",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "ae0fc4f10bc77b1c"
            ]
        ]
    },
    {
        "id": "4b8c183f1356284f",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "da38d23ccf173148",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1280,
        "wires": []
    },
    {
        "id": "be714f71d5000651",
        "type": "ui_table",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "group": "f3c3f94ba5fb1a21",
        "name": "Exceeded Threshold Values vs Time",
        "order": 8,
        "width": 13,
        "height": 5,
        "columns": [
            {
                "field": "z",
                "title": "Parameter",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "x",
                "title": "Exceeded Threshold Value",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time",
                "title": "Date / Time",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "",
                "title": "Opinion",
                "width": "",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 650,
        "y": 1360,
        "wires": [
            [
                "284466397dbea963"
            ]
        ]
    },
    {
        "id": "fb26a1b4f8af0089",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "function 13",
        "func": "// Extract data from flow variables\nvar crossedMaxTemp = flow.get(\"crossedMaxTemp\");\nvar crossedTempTimes = flow.get(\"crossedTempTimes\");\nvar crossedMaxPower = flow.get(\"crossedMaxPower\");\nvar crossedPowerTimes = flow.get(\"crossedPowerTimes\");\nvar crossedMaxTension = flow.get(\"crossedMaxTension\");\nvar crossedTensionTimes = flow.get(\"crossedTensionTimes\");\nvar crossedMaxTorque = flow.get(\"crossedMaxTorque\");\nvar crossedTorqueTimes = flow.get(\"crossedTorqueTimes\");\nvar crossedMaxVelocity = flow.get(\"crossedMaxVelocity\");\nvar crossedVelocityTimes = flow.get(\"crossedVelocityTimes\");\nvar crossedMaxVoltage = flow.get(\"crossedMaxVoltage\");\nvar crossedVoltageTimes = flow.get(\"crossedVoltageTimes\");\nvar crossedMaxDancer = flow.get(\"crossedMaxDancer\");\nvar crossedDancerTimes = flow.get(\"crossedDancerTimes\");\n\n// Create an array to store the table data\nvar tableData = [];\n\n// Function to create table rows for a specific variable\nfunction createTableRows(xValues, timeValues, zValue) {\n    for (var i = 0; i < timeValues.length; i++) {\n        var tableRow = {\n            serialNumber: i + 1,\n            z: zValue,\n            // x: xValues[i],\n            x: Math.floor(xValues[i]), // Round down to the nearest integer\n            time: timeValues[i]\n        };\n        tableData.push(tableRow);\n    }\n}\n\n// Call the function for each variable with respective values\ncreateTableRows(crossedMaxTemp, crossedTempTimes, \"Temperature\");\ncreateTableRows(crossedMaxPower, crossedPowerTimes, \"Power\");\ncreateTableRows(crossedMaxTension, crossedTensionTimes, \"Tension\");\ncreateTableRows(crossedMaxTorque, crossedTorqueTimes, \"Torque\");\ncreateTableRows(crossedMaxVelocity, crossedVelocityTimes, \"Velocity\");\ncreateTableRows(crossedMaxVoltage, crossedVoltageTimes, \"Voltage\");\ncreateTableRows(crossedMaxDancer, crossedDancerTimes, \"Dancer\");\n\n// Prepare the message object with table data\nmsg.payload = tableData;\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1360,
        "wires": [
            [
                "be714f71d5000651",
                "b4f1cfaf1cf77c56"
            ]
        ]
    },
    {
        "id": "f97afeb38c36e573",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1360,
        "wires": [
            [
                "fb26a1b4f8af0089"
            ]
        ]
    },
    {
        "id": "b4f1cfaf1cf77c56",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 1420,
        "wires": []
    },
    {
        "id": "92d3ac818e7993f4",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 730,
        "y": 1660,
        "wires": [
            [
                "b5b9ae64908ed2fc"
            ]
        ]
    },
    {
        "id": "66531a2407e6b61f",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1600,
        "wires": [
            [
                "1b97ad04a645d8ed",
                "67ebacd953a449fb",
                "60e6872a3019c108",
                "5f635d980456e226",
                "9c09b327df39ddf8",
                "85169c46959da12b"
            ]
        ]
    },
    {
        "id": "1b97ad04a645d8ed",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "function 14",
        "func": "var crossedMaxTension = flow.get(\"crossedMaxTension\");\nvar crossedTensionTimes = flow.get(\"crossedTensionTimes\");\n\nfor (var i = 0; i < crossedMaxTension.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxTension[index];\n        node.send({\n            payload: payload,\n            topic: \"Tension\"  // Change this to your MQTT topic\n        });\n    }, crossedTensionTimes[i] * 1000, i);\n}\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1680,
        "wires": [
            [
                "0f506b1ae343ea5a"
            ]
        ]
    },
    {
        "id": "67ebacd953a449fb",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "function 15",
        "func": "var crossedMaxTemp = flow.get(\"crossedMaxTemp\");\nvar crossedTempTimes = flow.get(\"crossedTempTimes\");\n\nfor (var i = 0; i < crossedMaxTemp.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxTemp[index];\n        node.send({\n            payload: payload,\n            topic: \"Temp\"  // Change this to your MQTT topic\n        });\n    }, crossedTempTimes[i] * 1000, i);\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1720,
        "wires": [
            [
                "62974df6392f3228"
            ]
        ]
    },
    {
        "id": "60e6872a3019c108",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "function 16",
        "func": "var crossedMaxTorque = flow.get(\"crossedMaxTorque\");\nvar crossedTorqueTimes = flow.get(\"crossedTorqueTimes\");\n\nfor (var i = 0; i < crossedMaxTorque.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxTorque[index];\n        node.send({\n            payload: payload,\n            topic: \"Torque\"  // Change this to your MQTT topic\n        });\n    }, crossedTorqueTimes[i] * 1000, i);\n}\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1760,
        "wires": [
            [
                "ee48b6bddd9b14fa",
                "bfc8fc32b883bad1"
            ]
        ]
    },
    {
        "id": "5f635d980456e226",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "function 17",
        "func": "var crossedMaxPower = flow.get(\"crossedMaxPower\");\nvar crossedPowerTimes = flow.get(\"crossedPowerTimes\");\n\nfor (var i = 0; i < crossedMaxPower.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxPower[index];\n        node.send({\n            payload: payload,\n            topic: \"Power\"  // Change this to your MQTT topic\n        });\n    }, crossedPowerTimes[i] * 1000, i);\n}\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1800,
        "wires": [
            [
                "325b13429f4634ea"
            ]
        ]
    },
    {
        "id": "9c09b327df39ddf8",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "function 18",
        "func": "var crossedMaxVelocity = flow.get(\"crossedMaxVelocity\");\nvar crossedVelocityTimes = flow.get(\"crossedVelocityTimes\");\n\nfor (var i = 0; i < crossedMaxVelocity.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxVelocity[index];\n        node.send({\n            payload: payload,\n            topic: \"Velocity\"  // Change this to your MQTT topic\n        });\n    }, crossedVelocityTimes[i] * 1000, i);\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1840,
        "wires": [
            [
                "c5c93523b4d5ce47"
            ]
        ]
    },
    {
        "id": "85169c46959da12b",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "function 19",
        "func": "var crossedMaxVoltage = flow.get(\"crossedMaxVoltage\");\nvar crossedVoltageTimes = flow.get(\"crossedVoltageTimes\");\n\n\nfor (var i = 0; i < crossedMaxVoltage.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxVoltage[index];\n        node.send({\n            payload: payload,\n            topic: \"Voltage\"  // Change this to your MQTT topic\n        });\n    }, crossedVoltageTimes[i] * 1000, i);\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1880,
        "wires": [
            [
                "6de0bc159c9d7d04"
            ]
        ]
    },
    {
        "id": "35dbda2d22bd7483",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Show data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 70,
        "y": 1980,
        "wires": [
            [
                "1b97ad04a645d8ed",
                "67ebacd953a449fb",
                "60e6872a3019c108",
                "5f635d980456e226",
                "9c09b327df39ddf8",
                "85169c46959da12b"
            ]
        ]
    },
    {
        "id": "b5b9ae64908ed2fc",
        "type": "ui_chart",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Parameters ",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "bfc8fc32b883bad1",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 1560,
        "wires": []
    },
    {
        "id": "ae07cb630e343c5e",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Temp",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 550,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "d188587f741b907a",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Torque",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 1760,
        "wires": [
            [
                "4d9c89ecd94e914b"
            ]
        ]
    },
    {
        "id": "39ed07d44c983717",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Power",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 590,
        "y": 1800,
        "wires": [
            [
                "4d9c89ecd94e914b"
            ]
        ]
    },
    {
        "id": "85df7e7130fa53a0",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Velocity",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 1580,
        "wires": [
            [
                "b5b9ae64908ed2fc"
            ]
        ]
    },
    {
        "id": "d16ebde685323e55",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Voltage",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 590,
        "y": 1860,
        "wires": [
            [
                "2810fef8a9992427"
            ]
        ]
    },
    {
        "id": "62974df6392f3228",
        "type": "mqtt out",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Temp",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 410,
        "y": 1700,
        "wires": []
    },
    {
        "id": "ee48b6bddd9b14fa",
        "type": "mqtt out",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Torque",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 410,
        "y": 1760,
        "wires": []
    },
    {
        "id": "325b13429f4634ea",
        "type": "mqtt out",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Power",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 410,
        "y": 1800,
        "wires": []
    },
    {
        "id": "c5c93523b4d5ce47",
        "type": "mqtt out",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Velocity",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 420,
        "y": 1840,
        "wires": []
    },
    {
        "id": "6de0bc159c9d7d04",
        "type": "mqtt out",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Voltage",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 420,
        "y": 1880,
        "wires": []
    },
    {
        "id": "0f506b1ae343ea5a",
        "type": "mqtt out",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Tension",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 440,
        "y": 1620,
        "wires": []
    },
    {
        "id": "14cc164deb277e0e",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Tension",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 1620,
        "wires": [
            [
                "b5b9ae64908ed2fc"
            ]
        ]
    },
    {
        "id": "16b4a54d7d56b2e4",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d1c7d8351b55a383",
        "type": "OpcUa-Item",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI02",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "965d1a0d2056079a"
            ]
        ]
    },
    {
        "id": "e0161cb39283cd36",
        "type": "OpcUa-Item",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI03",
        "x": 360,
        "y": 140,
        "wires": [
            [
                "965d1a0d2056079a"
            ]
        ]
    },
    {
        "id": "4faabc453da8c87f",
        "type": "OpcUa-Item",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI01",
        "x": 360,
        "y": 60,
        "wires": [
            [
                "965d1a0d2056079a"
            ]
        ]
    },
    {
        "id": "965d1a0d2056079a",
        "type": "OpcUa-Client",
        "z": "7307483e41bd5053",
        "d": true,
        "g": "c6caae2a4014b8c1",
        "endpoint": "13571b0e22f50a8f",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "name": "",
        "x": 580,
        "y": 100,
        "wires": [
            [
                "76662d0fcf328080"
            ],
            []
        ]
    },
    {
        "id": "76662d0fcf328080",
        "type": "join",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 80,
        "wires": [
            [
                "86ee683287863c70"
            ]
        ]
    },
    {
        "id": "86ee683287863c70",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "name": "function 6",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Define an array of variable keys\nvar variableKeys = [\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStateTransitionCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageRowsCount\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_iAlarmStorageClear\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderIdentMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title\"\n];\n\n// Create an empty array to store values\nvar dataArray = [];\n\n// Loop through variable keys and extract values\nvariableKeys.forEach(function (key) {\n    dataArray.push(payloadObj[key] || 0);\n});\n\n// Set the formatted array as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8a9a2b1925801c0d",
        "type": "ui_form",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "name": "Set Threshold Values to below Parameters",
        "label": "",
        "group": "",
        "order": 0,
        "width": "6",
        "height": "4",
        "options": [
            {
                "label": "Temperature Deviation (°C)",
                "value": "Temp",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Power Deviation (%)",
                "value": "Pow",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Tension Deviation (%)",
                "value": "Tension",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Torque Deviation (%)",
                "value": "Torque",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Velocity Deviation (%)",
                "value": "Velocity",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Voltage Deviation (%)",
                "value": "Voltage",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Dancer Position Deviation (%)",
                "value": "Dancer",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Temp": "",
            "Pow": "",
            "Tension": "",
            "Torque": "",
            "Velocity": "",
            "Voltage": "",
            "Dancer": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "86ee683287863c70"
            ]
        ]
    },
    {
        "id": "e94f49fb1fabb074",
        "type": "inject",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d1c7d8351b55a383",
                "e0161cb39283cd36",
                "4faabc453da8c87f"
            ]
        ]
    },
    {
        "id": "f926ad822b2dd9ed",
        "type": "comment",
        "z": "7307483e41bd5053",
        "g": "c6caae2a4014b8c1",
        "name": "To collect data from OPCUA Server from machineand set thresholds, the function must be updated with the triggers",
        "info": "",
        "x": 450,
        "y": 260,
        "wires": []
    },
    {
        "id": "3aa92cca7ce9c426",
        "type": "ui_form",
        "z": "7307483e41bd5053",
        "g": "a88bf445781eb94e",
        "name": "Set Threshold Values to deviations",
        "label": "Enter Max Threshold Values Here",
        "group": "0469de013b063d3e",
        "order": 1,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Temperature Deviation (°C)",
                "value": "Temp Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Power Deviation (%)",
                "value": "Pow Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Tension Deviation (%)",
                "value": "Tension Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Torque Deviation (%)",
                "value": "Torque Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Velocity Deviation (%)",
                "value": "Velocity Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Voltage Deviation (%)",
                "value": "Voltage Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Dancer Position Deviation (%)",
                "value": "Dancer Max",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Temp Max": "",
            "Pow Max": "",
            "Tension Max": "",
            "Torque Max": "",
            "Velocity Max": "",
            "Voltage Max": "",
            "Dancer Max": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "b25eaeca26b0ec5e"
            ]
        ]
    },
    {
        "id": "ed140952d6499957",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "a88bf445781eb94e",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 360,
        "wires": []
    },
    {
        "id": "b25eaeca26b0ec5e",
        "type": "function",
        "z": "7307483e41bd5053",
        "g": "a88bf445781eb94e",
        "name": "function 9",
        "func": "// Assuming msg.payload contains the form data object\nlet formData = msg.payload;\n\n// Construct thresholds object from form data\nlet thresholds = {\n    TempMax: formData['Temp Max'],\n    PowMax: formData['Pow Max'],\n    TensionMax: formData['Tension Max'],\n    TorqueMax: formData['Torque Max'],\n    VelocityMax: formData['Velocity Max'],\n    VoltageMax: formData['Voltage Max'],\n    DancerMax: formData['Dancer Max']\n};\n\n// Store the thresholds object in the global context\nmsg.thresholds = thresholds;\nflow.set(\"thresholds\",msg.thresholds)\n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 360,
        "wires": [
            [
                "ed140952d6499957",
                "c2c8cdf10bed7e9a"
            ]
        ]
    },
    {
        "id": "c2c8cdf10bed7e9a",
        "type": "ui_template",
        "z": "7307483e41bd5053",
        "g": "a88bf445781eb94e",
        "group": "0469de013b063d3e",
        "name": "",
        "order": 6,
        "width": 6,
        "height": 5,
        "format": "<div>\n    <h2>Thresholds Table</h2>\n    <table>\n        <tr>\n            <th>Parameter</th>\n            <th>Value</th>\n        </tr>\n        <tr ng-repeat=\"(param, value) in msg.thresholds\">\n            <td>{{param}}</td>\n            <td>{{value}}</td>\n        </tr>\n    </table>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1bacddb66771e6ca",
        "type": "debug",
        "z": "7307483e41bd5053",
        "g": "fa4fa0540464be15",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 600,
        "wires": []
    },
    {
        "id": "f75cc256653c773e",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 730,
        "y": 1740,
        "wires": [
            [
                "4d9c89ecd94e914b"
            ]
        ]
    },
    {
        "id": "4d9c89ecd94e914b",
        "type": "ui_chart",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Parameters ",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "47b6714fd3889ab7",
        "type": "ui_button",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 770,
        "y": 1900,
        "wires": [
            [
                "2810fef8a9992427"
            ]
        ]
    },
    {
        "id": "2810fef8a9992427",
        "type": "ui_chart",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "group": "28bfe79bdb17b8fe",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Parameters ",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "62a84b0de1d5633c",
        "type": "mqtt in",
        "z": "7307483e41bd5053",
        "g": "6798c7931dd4d33a",
        "name": "",
        "topic": "Power",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 570,
        "y": 1940,
        "wires": [
            [
                "2810fef8a9992427"
            ]
        ]
    },
    {
        "id": "7ab64bc9fa0c0da6",
        "type": "ui_template",
        "z": "7307483e41bd5053",
        "g": "a88bf445781eb94e",
        "group": "0469de013b063d3e",
        "name": "Normal Values",
        "order": 7,
        "width": 6,
        "height": 5,
        "format": "<div>\n    <h2>Normal Values</h2>\n    <table>\n        <tr>\n            <th>Parameter</th>\n            <th>Value</th>\n        </tr>\n        <tr>\n            <td>motorTemperature</td>\n            <td>40 °C</td>\n        </tr>\n        <tr>\n            <td>power</td>\n            <td>25 kW</td>\n        </tr>\n        <tr>\n            <td>tension</td>\n            <td>700 N</td>\n        </tr>\n        <tr>\n            <td>torque</td>\n            <td>60 Nm</td>\n        </tr>\n        <tr>\n            <td>velocity</td>\n            <td>8 m/s</td>\n        </tr>\n        <tr>\n            <td>voltage</td>\n            <td>420 V</td>\n        </tr>\n        <tr>\n            <td>dancerPosition</td>\n            <td>300</td>\n        </tr>\n    </table>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "51f60e08fa09ab45",
        "type": "function",
        "z": "7307483e41bd5053",
        "name": "Rewinder Data",
        "func": "var query = \"SELECT * FROM operators_experience;\";\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1060,
        "wires": [
            [
                "10448dd9d8f19d1b"
            ]
        ]
    },
    {
        "id": "10448dd9d8f19d1b",
        "type": "mysql",
        "z": "7307483e41bd5053",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1490,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "284466397dbea963",
        "type": "change",
        "z": "7307483e41bd5053",
        "g": "d777cedde0ee439a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1360,
        "wires": [
            [
                "cd7410d8f51bd9a8"
            ]
        ]
    },
    {
        "id": "cd7410d8f51bd9a8",
        "type": "debug",
        "z": "7307483e41bd5053",
        "name": "debug 82",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1340,
        "wires": []
    },
    {
        "id": "96b59b9c2ee40f98",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "Triangle Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=3;i=1007;datatype=Double;",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "508aae72e70584d7"
            ]
        ]
    },
    {
        "id": "508aae72e70584d7",
        "type": "OpcUa-Client",
        "z": "fe3d6a013c5454d7",
        "endpoint": "894c6ff183e17d00",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "a6f8ae2f366aaa65"
            ],
            []
        ]
    },
    {
        "id": "b12588686102df0b",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "Counter Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=3;i=1002;datatype=Int32;",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "508aae72e70584d7"
            ]
        ]
    },
    {
        "id": "16ad15c8f09b1cff",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "Random Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=3;i=1003;datatype=Double;",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "4622d0e6cdb57137",
                "508aae72e70584d7"
            ]
        ]
    },
    {
        "id": "4622d0e6cdb57137",
        "type": "OpcUa-Client",
        "z": "fe3d6a013c5454d7",
        "endpoint": "894c6ff183e17d00",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "",
        "x": 460,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d1c98ba71673085b",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "String Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=5;s=String;datatype=String;",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "508aae72e70584d7"
            ]
        ]
    },
    {
        "id": "a5bb80dc686dcb02",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 740,
        "wires": []
    },
    {
        "id": "749fc47c9e767918",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "Error Code",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=2;i=5;datatype=String",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "1fc8ccbef9b30aec",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 800,
        "wires": []
    },
    {
        "id": "94a67717ae35e9f7",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "Triangle Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=3;i=1007;datatype=Double",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "7432552a7007fede",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 860,
        "wires": []
    },
    {
        "id": "23579ec1ffe325c9",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=2;i=2;datatype=Int64;",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "c75e62b3bf230337",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 880,
        "wires": []
    },
    {
        "id": "96caceeac7dd7450",
        "type": "file",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "filename": "C:\\Users\\H.Adapureddi\\Desktop\\database\\new.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1010,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eff0ce2726fbcf37",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "23bb915aa3dcd81e",
        "type": "function",
        "z": "fe3d6a013c5454d7",
        "name": "function 3",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Extract values from the payload object\nvar value1007 = payloadObj[\"ns=3;i=1007\"] || 0;\nvar value1002 = payloadObj[\"ns=3;i=1002\"] || 0;\nvar value1003 = payloadObj[\"ns=3;i=1003\"] || 0;\nvar value_string_01 = payloadObj[\"ns=5;s=String\"] || 0;\n\n// Create an array with individual values separated by commas\nvar dataArray = [value1007, value1002, value1003, value_string_01];\n\n// Set the formatted CSV data as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow (File node)\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 380,
        "wires": [
            [
                "8d458faa7aab1d7e"
            ]
        ]
    },
    {
        "id": "defeed8bddbc05a9",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "b46f49349a283542",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 480,
        "wires": []
    },
    {
        "id": "ce38099f513fee1d",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 140,
        "wires": []
    },
    {
        "id": "c0fa55cb59949f6a",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 380,
        "wires": []
    },
    {
        "id": "a6f8ae2f366aaa65",
        "type": "join",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "8d458faa7aab1d7e",
        "type": "csv",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "Timestamp,Counter,Random,Error_Description",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 950,
        "y": 280,
        "wires": [
            [
                "96caceeac7dd7450",
                "29371f5547291518"
            ]
        ]
    },
    {
        "id": "228982a74b3018e5",
        "type": "inject",
        "z": "fe3d6a013c5454d7",
        "name": "Define Timestamps",
        "props": [
            {
                "p": "payload.start",
                "v": "2023-11-20 12:31:09",
                "vt": "str"
            },
            {
                "p": "payload.end",
                "v": "2023-11-20 12:38:17",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "efdc604d7567f6e8"
            ]
        ]
    },
    {
        "id": "efdc604d7567f6e8",
        "type": "function",
        "z": "fe3d6a013c5454d7",
        "name": "Construct SQL Query",
        "func": "var startTimestamp = new Date(msg.payload.start).toISOString();\nvar endTimestamp = new Date(msg.payload.end).toISOString();\n\nmsg.topic = \"SELECT * FROM excel_data_01 WHERE TimeStamp >= '2023-11-20 12:31:09' AND TimeStamp <= '2023-11-20 12:38:17';\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 640,
        "wires": [
            [
                "296bbaaaa6ad58c1",
                "defeed8bddbc05a9"
            ]
        ]
    },
    {
        "id": "296bbaaaa6ad58c1",
        "type": "mysql",
        "z": "fe3d6a013c5454d7",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 690,
        "y": 680,
        "wires": [
            [
                "dcbaa76b3edc23e6"
            ]
        ]
    },
    {
        "id": "61e2d77b7ff3b99c",
        "type": "debug",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 720,
        "wires": []
    },
    {
        "id": "719a72b8c3bd0ef0",
        "type": "file",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "filename": "C:\\Users\\H.Adapureddi\\Desktop\\database\\data.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1130,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "dcbaa76b3edc23e6",
        "type": "csv",
        "z": "fe3d6a013c5454d7",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 850,
        "y": 620,
        "wires": [
            [
                "719a72b8c3bd0ef0"
            ]
        ]
    },
    {
        "id": "022426a3a4d51945",
        "type": "mysql",
        "z": "fe3d6a013c5454d7",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "29371f5547291518",
        "type": "function",
        "z": "fe3d6a013c5454d7",
        "name": "Process Data and Insert into MySQL",
        "func": "// Split the payload by comma\nvar payloadValues = msg.payload.split(',');\n\n// Define table name\nvar tableName = 'opc_data';\n\n// Define column names and their data types\nvar columns = [];\npayloadValues.forEach(function(value, index) {\n    if (!isNaN(value)) { // Check if the value is a number\n        if (Number.isInteger(parseFloat(value))) {\n            columns.push(`Column_${index} INT`); // If it's an integer, define as INT\n        } else {\n            columns.push(`Column_${index} DOUBLE`); // If it's a float, define as DOUBLE\n        }\n    } else if (/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}Z$/.test(value)) { // Check if the value is a timestamp\n        columns.push(`Column_${index} TIMESTAMP`); // Define as TIMESTAMP\n    } else {\n        columns.push(`Column_${index} VARCHAR(255)`); // If it's a string, define as VARCHAR\n    }\n});\n\n// Construct SQL query to insert data into the table\nvar insertDataQuery = `INSERT INTO ${tableName} VALUES (?, ?, ?, ?)`;\n\n// Set the SQL query and payload values in the message object\nmsg.topic = insertDataQuery;\nmsg.payload = payloadValues;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "022426a3a4d51945"
            ]
        ]
    },
    {
        "id": "16e65f9db2c61986",
        "type": "ui_form",
        "z": "b3202ac6a97ce6d4",
        "g": "45db254b0e844511",
        "name": "Set Threshold Values to deviations",
        "label": "Enter COORELATION coefficent Here",
        "group": "58374364e6d47f7d",
        "order": 2,
        "width": 6,
        "height": 5,
        "options": [
            {
                "label": "Temperature Deviation (°C)",
                "value": "Temp Max",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Power Deviation (%)",
                "value": "Pow Max",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Tension Deviation (%)",
                "value": "Tension Max",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Torque Deviation (%)",
                "value": "Torque Max",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Velocity Deviation (%)",
                "value": "Velocity Max",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Voltage Deviation (%)",
                "value": "Voltage Max",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Dancer Position Deviation (%)",
                "value": "Dancer Max",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "Temp Max": "",
            "Pow Max": "",
            "Tension Max": "",
            "Torque Max": "",
            "Velocity Max": "",
            "Voltage Max": "",
            "Dancer Max": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 1680,
        "y": 60,
        "wires": [
            [
                "73a8c38d92a2ea43"
            ]
        ]
    },
    {
        "id": "8d2650ec88014c04",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "g": "45db254b0e844511",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 60,
        "wires": []
    },
    {
        "id": "73a8c38d92a2ea43",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "g": "45db254b0e844511",
        "name": "function 22",
        "func": "// Assuming msg.payload contains the form data object\nlet formData = msg.payload;\n\n// Construct thresholds object from form data\nlet combined_thresholds = {\n    TempMax: formData['Temp Max'],\n    PowMax: formData['Pow Max'],\n    TensionMax: formData['Tension Max'],\n    TorqueMax: formData['Torque Max'],\n    VelocityMax: formData['Velocity Max'],\n    VoltageMax: formData['Voltage Max'],\n    DancerMax: formData['Dancer Max']\n};\n\n// Store the thresholds object in the global context\nmsg.combined_thresholds = combined_thresholds;\nflow.set(\"thresholds\",msg.combined_thresholds)\n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 60,
        "wires": [
            [
                "8d2650ec88014c04",
                "3e2b2c6389640eaf"
            ]
        ]
    },
    {
        "id": "3e2b2c6389640eaf",
        "type": "ui_template",
        "z": "b3202ac6a97ce6d4",
        "g": "45db254b0e844511",
        "group": "58374364e6d47f7d",
        "name": "",
        "order": 13,
        "width": 6,
        "height": 5,
        "format": "<div>\n    <h2>Thresholds Table</h2>\n    <table>\n        <tr>\n            <th>Parameter</th>\n            <th>Value</th>\n        </tr>\n        <tr ng-repeat=\"(param, value) in msg.combined_thresholds\">\n            <td>{{param}}</td>\n            <td>{{value}}</td>\n        </tr>\n    </table>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2040,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6bb84cd3a664ea34",
        "type": "ui_button",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "group": "82260d81f2872231",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Insert Value",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-plus",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 590,
        "y": 2120,
        "wires": [
            [
                "e89eafaae9e7fbb0"
            ]
        ]
    },
    {
        "id": "0a75f88abffc1358",
        "type": "ui_dropdown",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "b715e2dabcd33237",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Motor",
                "value": "Motor",
                "type": "str"
            },
            {
                "label": "EtherCAT",
                "value": "EtherCAT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 200,
        "y": 580,
        "wires": [
            [
                "fcbc294f0b4833dd",
                "84a7d53817f1fc1f"
            ]
        ]
    },
    {
        "id": "5cc0d77eb3d13dfc",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "hide_Update_form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"KnowledgeDatabase_Motor\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 980,
        "wires": [
            [
                "4148c6501e6365ea"
            ]
        ]
    },
    {
        "id": "7266ccd1153e2036",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "ShowUpdateform",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"KnowledgeDatabase_Motor\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1410,
        "y": 960,
        "wires": [
            [
                "4148c6501e6365ea"
            ]
        ]
    },
    {
        "id": "4148c6501e6365ea",
        "type": "ui_ui_control",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "events": "all",
        "x": 1520,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "fcbc294f0b4833dd",
        "type": "switch",
        "z": "b3202ac6a97ce6d4",
        "name": "EtherCAT",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "EtherCAT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 700,
        "wires": [
            [
                "5cc0d77eb3d13dfc",
                "11e4b034e5af840c",
                "43673ba55a29581e"
            ]
        ]
    },
    {
        "id": "f7cc8664653a8e24",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 730,
        "y": 1400,
        "wires": [
            [
                "e07f88398ca3e2b5"
            ]
        ]
    },
    {
        "id": "67a3076fbf27a3a0",
        "type": "ui_button",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "group": "85a27feca851e911",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 1400,
        "wires": [
            [
                "6bda6e56f446a555",
                "6ce7bb8b9e672741",
                "c4e15e7acb6b8ad6",
                "b7b5b7281f59da13",
                "5cc0d77eb3d13dfc",
                "8afe56c7c2f1c644",
                "1c72e4099b98735c"
            ]
        ]
    },
    {
        "id": "e07f88398ca3e2b5",
        "type": "ui_table",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "group": "85a27feca851e911",
        "name": "Repeated Warning Codes",
        "order": 1,
        "width": 26,
        "height": 9,
        "columns": [
            {
                "field": "id",
                "title": "S.No.",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Id",
                "title": "Warning/ Error ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Id_count",
                "title": "Counter",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Error",
                "title": "Error",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Component",
                "title": "Component",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Layer",
                "title": "Layer",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Severity",
                "title": "Severity",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Last_Update_Time",
                "title": "Last Updated Time",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Cause",
                "title": "Cause",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Response",
                "title": "Response",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Remedy",
                "title": "Remedy",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Reference",
                "title": "Reference",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 990,
        "y": 1400,
        "wires": [
            [
                "cda805f584dcf398",
                "9f1721319ee358eb"
            ]
        ]
    },
    {
        "id": "6bda6e56f446a555",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "Read_distinct",
        "func": "// msg.topic = \"SELECT DISTINCT S_No, Severity, Id, Error, Layer, Id_count, Cause, Remedy, Response, Reference FROM solution_bank;\";\nmsg.topic = \"SELECT DISTINCT S_No, Severity, Id, Error, Component, Layer, Id_count, Cause, Remedy, Response, Reference, Last_Update_Time FROM new_unique_rows;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1400,
        "wires": [
            [
                "f7cc8664653a8e24"
            ]
        ]
    },
    {
        "id": "c66e359dce7cb889",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1480,
        "wires": []
    },
    {
        "id": "bde0d3e1cb44b4aa",
        "type": "inject",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1340,
        "wires": [
            [
                "6bda6e56f446a555"
            ]
        ]
    },
    {
        "id": "e6400a3f040ef9fa",
        "type": "ui_button",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "group": "76eb8cb92a8b11e7",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-pencil",
        "payload": "warningid",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 1440,
        "y": 1560,
        "wires": [
            [
                "a72947e8a408fc07",
                "0d765638f78fca3f"
            ]
        ]
    },
    {
        "id": "cda805f584dcf398",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "flow of tablevalues and Last Updated Time, Id",
        "rules": [
            {
                "t": "set",
                "p": "tablevalues",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "Last_Updated_Time",
                "pt": "flow",
                "to": "Last_Update_Time",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 1360,
        "wires": [
            [
                "b5c7979a913e5c99",
                "ee4df6eaaea0689a",
                "b66c30d5a33435d2"
            ]
        ]
    },
    {
        "id": "b5c7979a913e5c99",
        "type": "ui_text",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "group": "76eb8cb92a8b11e7",
        "order": 1,
        "width": 8,
        "height": 2,
        "name": "",
        "label": "Insert Solution",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1420,
        "y": 1300,
        "wires": []
    },
    {
        "id": "96b5df62b8c86837",
        "type": "ui_form",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "label": "Update Form",
        "group": "959fa78aa108123a",
        "order": 1,
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "Cause",
                "value": "Cause",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Error Type / Response",
                "value": "Response",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Remedy",
                "value": "Remedy",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Reference Manual",
                "value": "Reference",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Cause": "",
            "Response": "",
            "Remedy": "",
            "Reference": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 410,
        "y": 1800,
        "wires": [
            [
                "4a6f0b09fe1089c5",
                "c4e15e7acb6b8ad6"
            ]
        ]
    },
    {
        "id": "dddcd59166e6c9cc",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1820,
        "wires": []
    },
    {
        "id": "4a6f0b09fe1089c5",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "Update_with_form_values",
        "func": "// Assuming msg.payload contains the form data object\nlet form_data = msg.payload;\nlet warning_id = flow.get(\"warningid\"); // Assuming you have the warning_id value\n\n// Extracting Cause, Remedy, Response, and Reference from the form_data object\nlet cause = form_data.Cause;\nlet remedy = form_data.Remedy;\nlet response = form_data.Response;\nlet reference = form_data.Reference;\n\n// Getting the current timestamp\nlet current_timestamp = new Date().toISOString(); // Current timestamp in ISO 8601 format\n\n\n// SQL query for updating the solution_bank table\nlet sqlQuery = \"UPDATE new_unique_rows SET Cause = ?, Remedy = ?, Response = ?, Reference = ?, Last_Update_Time = CURRENT_TIMESTAMP WHERE Id = ?\";\n\n// Prepare the parameters for the SQL query\nlet params = [cause, remedy, response, reference, warning_id];\nlet categorized_tables_values = [cause, remedy, response, reference, current_timestamp, warning_id];\n\n// Set the SQL query and parameters to the msg object\nmsg.topic = sqlQuery;\nmsg.payload = params;\n\n// Set categorized_tables_values as a flow variable\nflow.set(\"categorized_tables_values\", categorized_tables_values);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1800,
        "wires": [
            [
                "b4594fc72b816fda",
                "1c14176ee7818b2e"
            ]
        ]
    },
    {
        "id": "ee4df6eaaea0689a",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a72947e8a408fc07",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 1640,
        "wires": []
    },
    {
        "id": "b66c30d5a33435d2",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "warningid",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1480,
        "wires": [
            [
                "fd333e9ffe3f2c37"
            ]
        ]
    },
    {
        "id": "fd333e9ffe3f2c37",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "checkChanged",
        "func": "var warning_id = msg.payload;\nvar table_id = flow.get(\"tablevalues.Id\");\n\nif (warning_id !== table_id){\n    msg.enabled = false;\n}else{\n    msg.enabled = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1480,
        "wires": [
            [
                "c66e359dce7cb889",
                "e6400a3f040ef9fa"
            ]
        ]
    },
    {
        "id": "149c8cc9e9c594c6",
        "type": "inject",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1260,
        "y": 1560,
        "wires": [
            [
                "e6400a3f040ef9fa"
            ]
        ]
    },
    {
        "id": "1c14176ee7818b2e",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1860,
        "wires": []
    },
    {
        "id": "b4594fc72b816fda",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 990,
        "y": 1680,
        "wires": [
            [
                "dddcd59166e6c9cc",
                "6bda6e56f446a555",
                "909d6f110f91fada",
                "6ce7bb8b9e672741",
                "43a85f46a5fbc2e8"
            ]
        ]
    },
    {
        "id": "909d6f110f91fada",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 1780,
        "wires": [
            [
                "e6400a3f040ef9fa"
            ]
        ]
    },
    {
        "id": "6ce7bb8b9e672741",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "hide_Update_Errors",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"KnowledgeDatabase_Update_Errors\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1240,
        "wires": [
            [
                "fa3e714df18a3fa9"
            ]
        ]
    },
    {
        "id": "fa3e714df18a3fa9",
        "type": "ui_ui_control",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "events": "all",
        "x": 1160,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "9f1721319ee358eb",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "ShowUpdateErrors",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"KnowledgeDatabase_Update_Errors\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 1300,
        "wires": [
            [
                "fa3e714df18a3fa9"
            ]
        ]
    },
    {
        "id": "c4e15e7acb6b8ad6",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "hide_Update_form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"KnowledgeDatabase_Update_form\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1680,
        "wires": [
            [
                "3a2f6b57091a7d21"
            ]
        ]
    },
    {
        "id": "0d765638f78fca3f",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "ShowUpdateform",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"KnowledgeDatabase_Update_form\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "3a2f6b57091a7d21"
            ]
        ]
    },
    {
        "id": "3a2f6b57091a7d21",
        "type": "ui_ui_control",
        "z": "b3202ac6a97ce6d4",
        "g": "129fd5b7ba4c920f",
        "name": "",
        "events": "all",
        "x": 620,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "f721c2e46a68ed32",
        "type": "ui_table",
        "z": "b3202ac6a97ce6d4",
        "group": "81a55ec65f49ffe1",
        "name": "Repeated Motor Codes",
        "order": 1,
        "width": 14,
        "height": 4,
        "columns": [
            {
                "field": "id",
                "title": "S.No.",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Id",
                "title": "Warning/ Error ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Error",
                "title": "Error",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Component",
                "title": "Component",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Cause",
                "title": "Cause",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Response",
                "title": "Response",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Remedy",
                "title": "Remedy",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Reference",
                "title": "Reference",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "4189936624e9d0e4",
                "3e1ae4595769e055",
                "2e990c0470f41ed9"
            ]
        ]
    },
    {
        "id": "4e5686aa3707aeea",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "function 25",
        "func": "msg.topic = \"SELECT DISTINCT S_No, Severity, Id, Error, Component, Layer, Id_count, Cause, Remedy, Response, Reference FROM new_unique_rows WHERE Component IN ('Motor temperature sensor', 'Motor feedback', 'Motor encoder', 'Motor', 'Motor temperature PTC') AND (Cause IS NOT NULL OR Remedy IS NOT NULL OR Response IS NOT NULL OR Reference IS NOT NULL);\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 580,
        "wires": [
            [
                "5541dbf0aafdd83f"
            ]
        ]
    },
    {
        "id": "5541dbf0aafdd83f",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 750,
        "y": 580,
        "wires": [
            [
                "f721c2e46a68ed32"
            ]
        ]
    },
    {
        "id": "84a7d53817f1fc1f",
        "type": "switch",
        "z": "b3202ac6a97ce6d4",
        "name": "Motor",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Motor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 640,
        "wires": [
            [
                "7266ccd1153e2036",
                "4e5686aa3707aeea",
                "b7b5b7281f59da13"
            ]
        ]
    },
    {
        "id": "d8492586be68850b",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 840,
        "wires": []
    },
    {
        "id": "ad9956982819a1f8",
        "type": "ui_table",
        "z": "b3202ac6a97ce6d4",
        "group": "e98d3df7bede08cb",
        "name": "Repeated Warning Codes",
        "order": 1,
        "width": 14,
        "height": 3,
        "columns": [
            {
                "field": "id",
                "title": "S.No.",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Id",
                "title": "Warning/ Error ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Error",
                "title": "Error",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Component",
                "title": "Component",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Cause",
                "title": "Cause",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Response",
                "title": "Response",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Remedy",
                "title": "Remedy",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Reference",
                "title": "Reference",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 850,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "11e4b034e5af840c",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "function 26",
        "func": "msg.topic = \"SELECT DISTINCT S_No, Severity, Id, Error, Component, Layer, Id_count, Cause, Remedy, Response, Reference FROM new_unique_rows WHERE Component IN ('EtherCAT communication', 'EtherCAT in-port of the slave') AND (Cause IS NOT NULL OR Remedy IS NOT NULL OR Response IS NOT NULL OR Reference IS NOT NULL);\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 880,
        "wires": [
            [
                "5c6bf05b2b21d185"
            ]
        ]
    },
    {
        "id": "5c6bf05b2b21d185",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 590,
        "y": 880,
        "wires": [
            [
                "ad9956982819a1f8",
                "d8492586be68850b"
            ]
        ]
    },
    {
        "id": "43673ba55a29581e",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "ShowUpdateform",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"KnowledgeDatabase_EtherCAT\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 940,
        "wires": [
            [
                "1068ec8c187cb782"
            ]
        ]
    },
    {
        "id": "1068ec8c187cb782",
        "type": "ui_ui_control",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "events": "all",
        "x": 1340,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "b7b5b7281f59da13",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "hide_Update_form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"KnowledgeDatabase_EtherCAT\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 1020,
        "wires": [
            [
                "1068ec8c187cb782"
            ]
        ]
    },
    {
        "id": "0848de68764c2cb7",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 800,
        "wires": []
    },
    {
        "id": "7d6fe8440e40804d",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "updated_id_values",
        "func": "// Function node to filter the array based on the Id matching \"0x20094380\"\nvar updated_id_values = flow.get(\"updated_id_values\");\nmsg.payload = updated_id_values[0];\n\nvar filteredValues = msg.payload.filter(function(item) {\n    return item.Id === \"0x20094380\";\n});\n\nmsg.payload = filteredValues;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 720,
        "wires": [
            [
                "3726dd946b3bf66f"
            ]
        ]
    },
    {
        "id": "3726dd946b3bf66f",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "updated_values",
        "func": "msg.topic = \"SELECT DISTINCT S_No, Severity, Id, Error, Component, Layer, Id_count, Cause, Remedy, Response, Reference FROM new_unique_rows WHERE Component IN ('Motor temperature sensor', 'Motor feedback', 'Motor encoder', 'Motor', 'Motor temperature PTC') AND (Cause IS NOT NULL OR Remedy IS NOT NULL OR Response IS NOT NULL OR Reference IS NOT NULL);\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 720,
        "wires": [
            [
                "0848de68764c2cb7"
            ]
        ]
    },
    {
        "id": "3914bfed8a7b2e99",
        "type": "ui_dropdown",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "40cc300a6d311f4b",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 2640,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "802f270332425884",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2280,
        "wires": []
    },
    {
        "id": "7e770d4c29988865",
        "type": "ui_form",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "label": "Add New Solution",
        "group": "402abb1e8613348e",
        "order": 1,
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "Warning Id",
                "value": "Id",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Error",
                "value": "Error",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Component",
                "value": "Component",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Layer",
                "value": "Layer",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Cause",
                "value": "Cause",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Error Type / Response",
                "value": "Response",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Remedy",
                "value": "Remedy",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Reference Manual",
                "value": "Reference",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Severity",
                "value": "Severity",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Id": "",
            "Error": "",
            "Component": "",
            "Layer": "",
            "Cause": "",
            "Response": "",
            "Remedy": "",
            "Reference": "",
            "Severity": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 630,
        "y": 2200,
        "wires": [
            [
                "fb9aaa0a4391ab82"
            ]
        ]
    },
    {
        "id": "fb9aaa0a4391ab82",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "add_new_data",
        "func": "// Extract values from msg.payload\nvar id = msg.payload.Id;\nvar error = msg.payload.Error;\nvar component = msg.payload.Component;\nvar layer = msg.payload.Layer;\nvar cause = msg.payload.Cause;\nvar response = msg.payload.Response;\nvar remedy = msg.payload.Remedy;\nvar reference = msg.payload.Reference;\nvar severity = msg.payload.Severity;\n\n// Set id_count to 1\nvar id_count = 1; // Assuming this value is still required\n\n// SQL query for inserting into the new_unique_rows table\nlet sqlQuery = \"INSERT INTO new_unique_rows (S_No, Id, Error, Component, Layer, Cause, Response, Remedy, Reference, Severity, id_count) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\n// Prepare the parameters for the SQL query\nlet params = [id, error, component, layer, cause, response, remedy, reference, severity, id_count];\n\n// Set the SQL query and parameters to the msg object\nmsg.topic = sqlQuery;\nmsg.payload = params;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2200,
        "wires": [
            [
                "aa55759a7743980b"
            ]
        ]
    },
    {
        "id": "aa55759a7743980b",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1170,
        "y": 2160,
        "wires": [
            [
                "6038e5f6335f5de7",
                "6bda6e56f446a555"
            ]
        ]
    },
    {
        "id": "6038e5f6335f5de7",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2160,
        "wires": []
    },
    {
        "id": "4d57e11d12ba78b9",
        "type": "inject",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 2200,
        "wires": [
            [
                "6bb84cd3a664ea34"
            ]
        ]
    },
    {
        "id": "8afe56c7c2f1c644",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "hide_Insert_form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"KnowledgeDatabase_Add_New_Solution\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 2080,
        "wires": [
            [
                "f2c5ddb13585a6c1"
            ]
        ]
    },
    {
        "id": "f2c5ddb13585a6c1",
        "type": "ui_ui_control",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "events": "all",
        "x": 1060,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "e89eafaae9e7fbb0",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "Show_Insert_form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"KnowledgeDatabase_Add_New_Solution\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 2140,
        "wires": [
            [
                "f2c5ddb13585a6c1"
            ]
        ]
    },
    {
        "id": "4189936624e9d0e4",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 660,
        "wires": []
    },
    {
        "id": "6d41fef953678142",
        "type": "ui_text",
        "z": "b3202ac6a97ce6d4",
        "group": "301c1c1510d41896",
        "order": 1,
        "width": 16,
        "height": 2,
        "name": "",
        "label": "View Past 5 Solutions",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1780,
        "y": 580,
        "wires": []
    },
    {
        "id": "3e1ae4595769e055",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "motorvalues",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "motor_warning_id",
                "pt": "flow",
                "to": "payload.id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 580,
        "wires": [
            [
                "6d41fef953678142",
                "15a1c2e7b8690ef5"
            ]
        ]
    },
    {
        "id": "2e990c0470f41ed9",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "ShowUpdateErrors",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"KnowledgeDatabase_Motor_Warnings\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "fd47762e3b21121b"
            ]
        ]
    },
    {
        "id": "fd47762e3b21121b",
        "type": "ui_ui_control",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "events": "all",
        "x": 1400,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1c72e4099b98735c",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "hide_Update_Errors",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"KnowledgeDatabase_Motor_Warnings\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "fd47762e3b21121b"
            ]
        ]
    },
    {
        "id": "43a85f46a5fbc2e8",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "categorized Motor Variables Update",
        "func": "// Retrieve the values from the flow variable \"categorized_tables_values\"\nlet categorized_tables_values = flow.get(\"categorized_tables_values\");\n\n// Extract values\nlet cause = categorized_tables_values[0];\nlet remedy = categorized_tables_values[1];\nlet response = categorized_tables_values[2];\nlet reference = categorized_tables_values[3];\nlet lastUpdateTime = categorized_tables_values[4];\nlet warningId = categorized_tables_values[5]; // Assuming this is the last value in the array\n\n// SQL query for inserting into the categoried_table\nlet sqlQuery = \"INSERT INTO categoried_table (Cause, Remedy, Response, Reference, Last_Update_Time, Id) VALUES (?, ?, ?, ?, ?, ?)\";\n\n// Prepare the parameters for the SQL query\nlet params = [cause, remedy, response, reference, lastUpdateTime, warningId];\n\n// Set the SQL query and parameters to the message object\nmsg.topic = sqlQuery;\nmsg.payload = params;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 1680,
        "wires": [
            [
                "6de56e169ce866f7"
            ]
        ]
    },
    {
        "id": "6de56e169ce866f7",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1910,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "d504820d4469a909",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1500,
        "wires": []
    },
    {
        "id": "a06b1589291ebf97",
        "type": "ui_table",
        "z": "b3202ac6a97ce6d4",
        "group": "301c1c1510d41896",
        "name": "Past 5 Motor Codes",
        "order": 2,
        "width": 16,
        "height": 4,
        "columns": [
            {
                "field": "id",
                "title": "S.No.",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Id",
                "title": "Warning/ Error ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Cause",
                "title": "Cause",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Response",
                "title": "Response",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Remedy",
                "title": "Remedy",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Reference",
                "title": "Reference",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Last_Update_Time",
                "title": "Last_Update_Time",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 2000,
        "y": 1440,
        "wires": [
            [
                "d504820d4469a909"
            ]
        ]
    },
    {
        "id": "15a1c2e7b8690ef5",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "filtered categorized Motor Variables Update",
        "func": "// Retrieve the value of the flow variable \"motor_warning_id\"\nlet motorWarningId = msg.payload;\n\n// SQL query to select records from the categoried_table where Id matches motor_warning_id\nlet sqlQuery = \"SELECT * FROM categoried_table WHERE Id = ? ORDER BY Last_Update_Time DESC LIMIT 5\";\n\n// Prepare the parameters for the SQL query\nlet params = [motorWarningId];\n\n// Set the SQL query and parameters to the message object\nmsg.topic = sqlQuery;\nmsg.payload = params;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1320,
        "wires": [
            [
                "51748339bb354b16"
            ]
        ]
    },
    {
        "id": "51748339bb354b16",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1930,
        "y": 1400,
        "wires": [
            [
                "a06b1589291ebf97"
            ]
        ]
    },
    {
        "id": "4c88e4927988c3cd",
        "type": "inject",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 2860,
        "wires": [
            [
                "b0377811f1cabe3f",
                "689a24b4ed6f7883",
                "5fb1fd8e9df7de7c"
            ]
        ]
    },
    {
        "id": "4ee42a3613959ec2",
        "type": "mqtt out",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "topic": "updated warnings",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 1570,
        "y": 2440,
        "wires": []
    },
    {
        "id": "0ae4a79b5585c378",
        "type": "mqtt in",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "topic": "updated warnings",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1840,
        "y": 2440,
        "wires": [
            [
                "7de08c9635972b9a"
            ]
        ]
    },
    {
        "id": "80a6cac7180a10f1",
        "type": "mqtt in",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "topic": "time",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5ef3beb0ace0c65c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1830,
        "y": 2500,
        "wires": [
            [
                "7de08c9635972b9a"
            ]
        ]
    },
    {
        "id": "7de08c9635972b9a",
        "type": "ui_chart",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "group": "3560edf71eedc737",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Parameters ",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2070,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "f4032acd7e0e6fb6",
        "type": "mqtt out",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "topic": "time",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5ef3beb0ace0c65c",
        "x": 1650,
        "y": 2560,
        "wires": []
    },
    {
        "id": "b0377811f1cabe3f",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "d": true,
        "name": "function 38",
        "func": "var crossedMaxVelocity = flow.get(\"crossedMaxVelocity\");\nvar crossedVelocityTimes = flow.get(\"crossedVelocityTimes\");\n\nfor (var i = 0; i < crossedMaxVelocity.length; i++) {\n    setTimeout(function(index) {\n        var payload = crossedMaxVelocity[index];\n        node.send({\n            payload: payload,\n            topic: \"Velocity\"  // Change this to your MQTT topic\n        });\n    }, crossedVelocityTimes[i] * 1000, i);\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 2560,
        "wires": [
            [
                "f4032acd7e0e6fb6"
            ]
        ]
    },
    {
        "id": "689a24b4ed6f7883",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "d": true,
        "name": "Id",
        "func": "// Retrieve the value of the flow variable \"categorized_tables_values\"\nlet categorized_tables_values = flow.get(\"categorized_tables_values\");\n\n// Iterate through each row of the data\nfor (let i = 0; i < categorized_tables_values.length; i++) {\n    // Send the \"Id\" value to the debug node\n    node.send({ payload: categorized_tables_values[i].Id });\n}\n\n// Return null to prevent additional messages from being sent\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2520,
        "wires": [
            [
                "4ee42a3613959ec2",
                "c499bb0f8a29ed7d"
            ]
        ]
    },
    {
        "id": "c499bb0f8a29ed7d",
        "type": "debug",
        "z": "b3202ac6a97ce6d4",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 2720,
        "wires": []
    },
    {
        "id": "5fb1fd8e9df7de7c",
        "type": "function",
        "z": "b3202ac6a97ce6d4",
        "name": "categorized Motor Variables Update",
        "func": "// SQL query to select all values from the \"Id\" column\nvar sqlQuery = \"SELECT Id, Last_Update_Time FROM categoried_table\";\n\n// Set the SQL query as the message payload\nmsg.topic = sqlQuery;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2860,
        "wires": [
            [
                "9ce74e060d359a6e"
            ]
        ]
    },
    {
        "id": "9ce74e060d359a6e",
        "type": "mysql",
        "z": "b3202ac6a97ce6d4",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1350,
        "y": 2920,
        "wires": [
            [
                "be94017bd7923688"
            ]
        ]
    },
    {
        "id": "be94017bd7923688",
        "type": "ui_table",
        "z": "b3202ac6a97ce6d4",
        "group": "3560edf71eedc737",
        "name": "Repeated Motor Codes",
        "order": 1,
        "width": "5",
        "height": "3",
        "columns": [
            {
                "field": "Id",
                "title": "Warning/ Error ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Last_Update_Time",
                "title": "Last_Update_Time",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1490.5078125,
        "y": 2986.5234375,
        "wires": [
            [
                "d1852921ff0b9820"
            ]
        ]
    },
    {
        "id": "d1852921ff0b9820",
        "type": "change",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "Last_Update_Time",
                "pt": "msg",
                "to": "payload.Last_Update_Time",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1660,
        "y": 2940,
        "wires": [
            [
                "bf5945609cd2ca4f"
            ]
        ]
    },
    {
        "id": "bf5945609cd2ca4f",
        "type": "ui_chart",
        "z": "b3202ac6a97ce6d4",
        "name": "",
        "group": "3560edf71eedc737",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Parameters ",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1831.5078125,
        "y": 2962.5234375,
        "wires": [
            []
        ]
    },
    {
        "id": "f399317fd1ff5474",
        "type": "function",
        "z": "589ed993f6793fb0",
        "name": "Format Data",
        "func": "// Initialize a global variable to store the collected data\ncontext.global.data = context.global.data || [];\n\n// Push the new payload (number) to the data array\ncontext.global.data.push(msg.payload);\n\n// Check if the data array has reached a certain length (e.g., 10)\nif (context.global.data.length >= 3) {\n    // If the data array has reached the desired length, create a row\n    var row = context.global.data.join(\",\") + \"\\n\"; // Join the numbers with a comma and add a newline character\n\n    // Send the row to the next node to write to the Excel sheet\n    node.send({ payload: row });\n\n    // Clear the data array to start collecting new data\n    context.global.data = [];\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "791b9008b8e4b5b2",
        "type": "comment",
        "z": "589ed993f6793fb0",
        "name": "Instructions",
        "info": "# topic\nmsg.topic must be \"multiple\"\n\n# payload\nmsg.paylod contains array of nodeId objects\n{\"nodeId\": \"ns=1;s=NodeIdString\"\n",
        "x": 2670,
        "y": 580,
        "wires": []
    },
    {
        "id": "29a398643f1e8ac9",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI02",
        "x": 760,
        "y": 420,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "421505d444aa346f",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI03",
        "x": 760,
        "y": 460,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "3a0bd3be55b0600e",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI01",
        "x": 780,
        "y": 380,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "c3c03366b666c9a3",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "ALL",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "3a0bd3be55b0600e",
                "29a398643f1e8ac9",
                "421505d444aa346f",
                "0fcaafb110bc5498",
                "96114c5792d908bd",
                "be781c400ce865c9",
                "90c0ca958fc9a864",
                "bb364861c6552972",
                "c3429c5ca78ba71f",
                "c3763153c95e5fd8",
                "f53b61e5b44e7ecb",
                "4cd8f61c0413ffd4",
                "e29ec162a77a9f58",
                "21d2450b7e77ea77",
                "03ad30b60f8a9673",
                "1cfa77beb32f7518",
                "cb302a172cc8f5bc",
                "c83aff99d2470c9c",
                "1da1d8bed66e85a3",
                "adb33d5895573178",
                "09a2e65c4839ef1b",
                "5adb43ffac725903",
                "69ed850c566081f6",
                "ccbf22a6cbb44107",
                "d676d3ebde6e5997",
                "13c384f055e4b86b",
                "499ca12b430cf1be",
                "b08014605b8b5f6d",
                "bdc86ef336911a18",
                "9f0b6b9590d6244c",
                "e208d6b74a863b8d",
                "73330ecf426c040a",
                "c92361a296fb292f",
                "6ae1d238674c9618",
                "f1c4646a43cc46dc",
                "312c1e9d7ded27ec"
            ]
        ]
    },
    {
        "id": "d0f30f9c6b362708",
        "type": "OpcUa-Client",
        "z": "589ed993f6793fb0",
        "d": true,
        "g": "f023a2b58e3d43b5",
        "endpoint": "13571b0e22f50a8f",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "name": "",
        "x": 1080,
        "y": 460,
        "wires": [
            [
                "d36b65de59cd4a54"
            ],
            []
        ]
    },
    {
        "id": "817b43f7f7e86f2a",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "3a0bd3be55b0600e"
            ]
        ]
    },
    {
        "id": "c8e250da03515acd",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 280,
        "wires": [
            [
                "29a398643f1e8ac9"
            ]
        ]
    },
    {
        "id": "ed8184f3e5b548dc",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "421505d444aa346f"
            ]
        ]
    },
    {
        "id": "d36b65de59cd4a54",
        "type": "join",
        "z": "589ed993f6793fb0",
        "d": true,
        "g": "f023a2b58e3d43b5",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "36",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "7735479fc477c546"
            ]
        ]
    },
    {
        "id": "9779ecb9ef319d0f",
        "type": "file",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "",
        "filename": "C:\\Users\\H.Adapureddi\\Desktop\\database\\new.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1430,
        "y": 400,
        "wires": [
            [
                "22d76a1aced83418"
            ]
        ]
    },
    {
        "id": "7735479fc477c546",
        "type": "function",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "function 28",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Define an array of variable keys\nvar variableKeys = [\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStateTransitionCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageRowsCount\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_iAlarmStorageClear\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderIdentMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title\"\n];\n\n// Create an empty array to store values\nvar dataArray = [];\n\n// Loop through variable keys and extract values\nvariableKeys.forEach(function (key) {\n    dataArray.push(payloadObj[key] || 0);\n});\n\n// Set the formatted array as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 680,
        "wires": [
            [
                "aa068bd59bf1e109"
            ]
        ]
    },
    {
        "id": "22d76a1aced83418",
        "type": "debug",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 460,
        "wires": []
    },
    {
        "id": "719b049d56cc59f0",
        "type": "mysql",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1630,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "e1c22e7a4e68b64b",
        "type": "function",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "Process Data and Insert into MySQL",
        "func": "// Split the payload by comma\nvar payloadValues = msg.payload.split(',');\n\n// Define table name\nvar tableName = 'opc_data';\n\n// Define column names and their data types\nvar columns = [];\npayloadValues.forEach(function (value, index) {\n    if (!isNaN(value)) { // Check if the value is a number\n        if (Number.isInteger(parseFloat(value))) {\n            columns.push(`Column_${index} INT`); // If it's an integer, define as INT\n        } else {\n            columns.push(`Column_${index} DOUBLE`); // If it's a float, define as DOUBLE\n        }\n    } else if (/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}Z$/.test(value)) { // Check if the value is a timestamp\n        columns.push(`Column_${index} TIMESTAMP`); // Define as TIMESTAMP\n    } else {\n        columns.push(`Column_${index} VARCHAR(255)`); // If it's a string, define as VARCHAR\n    }\n});\n\n// Define all the variable names (assuming they are in the same order as payloadValues)\nvar variableNames = [\n    \"g_AI_i201KF0_AI01\",\n    \"g_AI_i201KF0_AI02\",\n    \"g_AI_i201KF0_AI03\",\n    \"g_diAlarmStateTransitionCounter\",\n    \"g_diAlarmStorageCounter\",\n    \"g_diAlarmStorageRowsCount\",\n    \"g_iAlarmStorageClear\",\n    \"g_lrX4RewinderActMotorTemp\",\n    \"g_lrX4RewinderActPower\",\n    \"g_lrX4RewinderActTens\",\n    \"g_lrX4RewinderActTorque\",\n    \"g_lrX4RewinderActVel\",\n    \"g_lrX4RewinderActVoltage\",\n    \"g_lrX4RewinderIdentMInertia\",\n    \"g_lrX4RewinderMotorTempWarning\",\n    \"g_lrX4RewinderSetMInertia\",\n    \"g_lrX4RewinderSetTens\",\n    \"g_lrX4RewinderSetTorque\",\n    \"g_lrX4RewinderSetVel\",\n    \"g_lrX4UnwinderActDancerPos\",\n    \"g_lrX4UnwinderActMotorTemp\",\n    \"g_lrX4UnwinderActPower\",\n    \"g_lrX4UnwinderActTorque\",\n    \"g_lrX4UnwinderActVel\",\n    \"g_lrX4UnwinderActVoltage\",\n    \"g_lrX4UnwinderDancerLowLimit\",\n    \"g_lrX4UnwinderDancerUpperLimit\",\n    \"g_lrX4UnwinderMotorTempWarning\",\n    \"g_lrX4UnwinderSetTorque\",\n    \"g_lrX4UnwinderSetVel\",\n    \"x4portal_ticket_alarmcode\",\n    \"x4portal_ticket_componentPath\",\n    \"x4portal_ticket_create\",\n    \"x4portal_ticket_description\",\n    \"x4portal_ticket_priority\",\n    \"x4portal_ticket_title\"\n];\n\n// Construct SQL query to insert data into the table\nvar insertDataQuery = `INSERT INTO ${tableName} (${variableNames.join(', ')}) VALUES (${Array(payloadValues.length).fill('?').join(', ')})`;\n\n// Set the SQL query and payload values in the message object\nmsg.topic = insertDataQuery;\nmsg.payload = payloadValues;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 580,
        "wires": [
            [
                "719b049d56cc59f0"
            ]
        ]
    },
    {
        "id": "aa068bd59bf1e109",
        "type": "csv",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "g_AI_i201KF0_AI01, g_AI_i201KF0_AI02, g_AI_i201KF0_AI03, g_diAlarmStateTransitionCounter, g_diAlarmStorageCounter, g_diAlarmStorageRowsCount, g_iAlarmStorageClear, g_lrX4RewinderActMotorTemp, g_lrX4RewinderActPower, g_lrX4RewinderActTens, g_lrX4RewinderActTorque, g_lrX4RewinderActVel, g_lrX4RewinderActVoltage, g_lrX4RewinderIdentMInertia, g_lrX4RewinderMotorTempWarning, g_lrX4RewinderSetMInertia, g_lrX4RewinderSetTens, g_lrX4RewinderSetTorque, g_lrX4RewinderSetVel, g_lrX4UnwinderActDancerPos, g_lrX4UnwinderActMotorTemp, g_lrX4UnwinderActPower, g_lrX4UnwinderActTorque, g_lrX4UnwinderActVel, g_lrX4UnwinderActVoltage, g_lrX4UnwinderDancerLowLimit, g_lrX4UnwinderDancerUpperLimit, g_lrX4UnwinderMotorTempWarning, g_lrX4UnwinderSetTorque, g_lrX4UnwinderSetVel, x4portal_ticket_alarmcode, x4portal_ticket_componentPath, x4portal_ticket_create, x4portal_ticket_description, x4portal_ticket_priority, x4portal_ticket_title",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1370,
        "y": 580,
        "wires": [
            [
                "9779ecb9ef319d0f",
                "e1c22e7a4e68b64b"
            ]
        ]
    },
    {
        "id": "58a1e0aa78639767",
        "type": "debug",
        "z": "589ed993f6793fb0",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2700,
        "y": 840,
        "wires": []
    },
    {
        "id": "fab59b5c2fd05102",
        "type": "debug",
        "z": "589ed993f6793fb0",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2680,
        "y": 760,
        "wires": []
    },
    {
        "id": "0fcaafb110bc5498",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStateTransitionCounter",
        "datatype": "Int32",
        "value": "",
        "name": "g_diAlarmStateTransitionCounter",
        "x": 720,
        "y": 120,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "96114c5792d908bd",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageCounter",
        "datatype": "Int32",
        "value": "",
        "name": "g_diAlarmStorageCounter",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "90c0ca958fc9a864",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_iAlarmStorageClear",
        "datatype": "Int16",
        "value": "",
        "name": "g_iAlarmStorageClear",
        "x": 760,
        "y": 240,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "41300a5cee1974c1",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 180,
        "wires": [
            [
                "90c0ca958fc9a864"
            ]
        ]
    },
    {
        "id": "b3d93af01dd7fd9d",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "0fcaafb110bc5498"
            ]
        ]
    },
    {
        "id": "0f0b1a1da4ce3dde",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "96114c5792d908bd"
            ]
        ]
    },
    {
        "id": "be781c400ce865c9",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageRowsCount",
        "datatype": "Int32",
        "value": "",
        "name": "g_diAlarmStorageRowsCount",
        "x": 730,
        "y": 200,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "d19aa0c556f87fdf",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 140,
        "wires": [
            [
                "be781c400ce865c9"
            ]
        ]
    },
    {
        "id": "e29ec162a77a9f58",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActVoltage",
        "x": 760,
        "y": 800,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "21d2450b7e77ea77",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderIdentMInertia",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderIdentMInertia",
        "x": 800,
        "y": 840,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "4cd8f61c0413ffd4",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActVel",
        "x": 780,
        "y": 760,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "c8b95b4fe15264b8",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 760,
        "wires": [
            [
                "4cd8f61c0413ffd4"
            ]
        ]
    },
    {
        "id": "67374600b60664bb",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 800,
        "wires": [
            [
                "e29ec162a77a9f58"
            ]
        ]
    },
    {
        "id": "1ebe32afa6950840",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 840,
        "wires": [
            [
                "21d2450b7e77ea77"
            ]
        ]
    },
    {
        "id": "bb364861c6552972",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActMotorTemp",
        "x": 750,
        "y": 580,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "c3429c5ca78ba71f",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActPower",
        "x": 770,
        "y": 620,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "f53b61e5b44e7ecb",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActTorque",
        "x": 790,
        "y": 700,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "a12ed7e5967d4453",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 720,
        "wires": [
            [
                "f53b61e5b44e7ecb"
            ]
        ]
    },
    {
        "id": "e5eb124ff23568c6",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "bb364861c6552972"
            ]
        ]
    },
    {
        "id": "8c471a741178a221",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 640,
        "wires": [
            [
                "c3429c5ca78ba71f"
            ]
        ]
    },
    {
        "id": "c3763153c95e5fd8",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTens",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActTens",
        "x": 770,
        "y": 660,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "1f68553360b49d23",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 680,
        "wires": [
            [
                "c3763153c95e5fd8"
            ]
        ]
    },
    {
        "id": "adb33d5895573178",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActDancerPos",
        "x": 790,
        "y": 1120,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "09a2e65c4839ef1b",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActMotorTemp",
        "x": 810,
        "y": 1160,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "1da1d8bed66e85a3",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetVel",
        "x": 800,
        "y": 1060,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "495a718371aa4dc9",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "1da1d8bed66e85a3"
            ]
        ]
    },
    {
        "id": "e721878aa67dddb3",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 1100,
        "wires": [
            [
                "adb33d5895573178"
            ]
        ]
    },
    {
        "id": "88185d4244e2e8ee",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 1140,
        "wires": [
            [
                "09a2e65c4839ef1b"
            ]
        ]
    },
    {
        "id": "03ad30b60f8a9673",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderMotorTempWarning",
        "x": 780,
        "y": 880,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "1cfa77beb32f7518",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetMInertia",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetMInertia",
        "x": 800,
        "y": 940,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "c83aff99d2470c9c",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetTorque",
        "x": 810,
        "y": 1020,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "e5eaa3e72b2fbf55",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 1020,
        "wires": [
            [
                "c83aff99d2470c9c"
            ]
        ]
    },
    {
        "id": "bf4e831926df7f42",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 900,
        "wires": [
            [
                "03ad30b60f8a9673"
            ]
        ]
    },
    {
        "id": "439388548d2f44d0",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 940,
        "wires": [
            [
                "1cfa77beb32f7518"
            ]
        ]
    },
    {
        "id": "cb302a172cc8f5bc",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTens",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetTens",
        "x": 810,
        "y": 980,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "f00749ee86470e22",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 980,
        "wires": [
            [
                "cb302a172cc8f5bc"
            ]
        ]
    },
    {
        "id": "499ca12b430cf1be",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerUpperLimit",
        "x": 820,
        "y": 1440,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "b08014605b8b5f6d",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderMotorTempWarning",
        "x": 820,
        "y": 1480,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "13c384f055e4b86b",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerLowLimit",
        "x": 810,
        "y": 1400,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "a3f38069041dcc77",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1380,
        "wires": [
            [
                "13c384f055e4b86b"
            ]
        ]
    },
    {
        "id": "b6b8e73dfd229f65",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "499ca12b430cf1be"
            ]
        ]
    },
    {
        "id": "291efe2c0bc8e1b4",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1460,
        "wires": [
            [
                "b08014605b8b5f6d"
            ]
        ]
    },
    {
        "id": "5adb43ffac725903",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActPower",
        "x": 830,
        "y": 1200,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "69ed850c566081f6",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActTorque",
        "x": 830,
        "y": 1240,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "d676d3ebde6e5997",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActVoltage",
        "x": 820,
        "y": 1340,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "398030c2b46fa81e",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1340,
        "wires": [
            [
                "d676d3ebde6e5997"
            ]
        ]
    },
    {
        "id": "ac1833a010ba3ca4",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1220,
        "wires": [
            [
                "5adb43ffac725903"
            ]
        ]
    },
    {
        "id": "ea85a6e1e0e7a409",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "69ed850c566081f6"
            ]
        ]
    },
    {
        "id": "ccbf22a6cbb44107",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActVel",
        "x": 840,
        "y": 1300,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "ac9d849a45c23029",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 1300,
        "wires": [
            [
                "ccbf22a6cbb44107"
            ]
        ]
    },
    {
        "id": "6ae1d238674c9618",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_description",
        "x": 840,
        "y": 1780,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "f1c4646a43cc46dc",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_priority",
        "x": 820,
        "y": 1820,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "c92361a296fb292f",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create",
        "datatype": "Boolean",
        "value": "",
        "name": "x4portal_ticket_create",
        "x": 840,
        "y": 1740,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "8aa8489608973929",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1680,
        "wires": [
            [
                "c92361a296fb292f"
            ]
        ]
    },
    {
        "id": "6be4707a8ec52ad5",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1720,
        "wires": [
            [
                "6ae1d238674c9618"
            ]
        ]
    },
    {
        "id": "1ab33cfd31e4e415",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1760,
        "wires": [
            [
                "f1c4646a43cc46dc"
            ]
        ]
    },
    {
        "id": "bdc86ef336911a18",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderSetTorque",
        "x": 830,
        "y": 1540,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "9f0b6b9590d6244c",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderSetVel",
        "x": 840,
        "y": 1580,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "73330ecf426c040a",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_componentPath",
        "x": 830,
        "y": 1700,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "9cbed141eee476bd",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1640,
        "wires": [
            [
                "73330ecf426c040a"
            ]
        ]
    },
    {
        "id": "3ff165b845263358",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1520,
        "wires": [
            [
                "bdc86ef336911a18"
            ]
        ]
    },
    {
        "id": "59b483a8dc19c5c0",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1560,
        "wires": [
            [
                "9f0b6b9590d6244c"
            ]
        ]
    },
    {
        "id": "e208d6b74a863b8d",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_alarmcode",
        "x": 850,
        "y": 1660,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "549b866b18c7e201",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1600,
        "wires": [
            [
                "e208d6b74a863b8d"
            ]
        ]
    },
    {
        "id": "312c1e9d7ded27ec",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_title",
        "x": 830,
        "y": 1860,
        "wires": [
            [
                "d0f30f9c6b362708"
            ]
        ]
    },
    {
        "id": "821aaca333ac4c60",
        "type": "inject",
        "z": "589ed993f6793fb0",
        "g": "f023a2b58e3d43b5",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 1800,
        "wires": [
            [
                "312c1e9d7ded27ec"
            ]
        ]
    },
    {
        "id": "59ae78a808e0b447",
        "type": "debug",
        "z": "589ed993f6793fb0",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2700,
        "y": 700,
        "wires": []
    },
    {
        "id": "61435aceb343bd36",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4RewinderDriveErrorID",
        "datatype": "Int32",
        "value": "",
        "name": "g_dwX4RewinderDriveErrorID",
        "x": 2650,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c86ea4b415a69aad",
        "type": "OpcUa-Item",
        "z": "589ed993f6793fb0",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4UnwinderDriveErrorID",
        "datatype": "UInt32",
        "value": "",
        "name": "g_dwX4UnwinderDriveErrorID",
        "x": 2630,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "0c9b7db0f342d582",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI02",
        "x": 1220,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e8e95528ce1de04c",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI03",
        "x": 1220,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "df55b8e9b62404d5",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01",
        "datatype": "Int16",
        "value": "",
        "name": "g_AI_i201KF0_AI01",
        "x": 1220,
        "y": 300,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "e59f6b8c88e475b1",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "ALL",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "374e70198db9a90a",
                "a8e45a0b01db199c",
                "810b0b78d066550d",
                "3d62f5858c60fab2",
                "0a25434848861602",
                "695b5972d0cf2eb3",
                "51f7fb36dd06b383",
                "0206dedd4b9b4f3d",
                "cd5533ecb6e26fa7",
                "a91340698ce2d876",
                "0ebfb3d0476c62ec",
                "d836844218e7f681",
                "7eb1e61ee4a18f97",
                "06b33284180b9b81",
                "94cc21725f0b111d",
                "01b5fd901e879887",
                "c0d3d87e21d876c1",
                "80305a2fc6567be5",
                "6d592c03bfa9acd4",
                "c1427f84179ed9a2",
                "cc4b46cfbfdfe002",
                "e889515dcd8ed404",
                "6e2010918ee399ea",
                "2d37ad4442a3903e",
                "1fcf79e9677a4741",
                "25deb6657a6c4250",
                "bb03ca456700c300",
                "7c68010e17fe4943",
                "8a765c118e332950",
                "852d84eb8262a1df",
                "72b93edaa3ff82d8",
                "6bcd9de2eaf53882",
                "b4aa83b682832772",
                "591a5a4d6225917c",
                "1261aae4cd49b543"
            ]
        ]
    },
    {
        "id": "07f590aec3814a58",
        "type": "OpcUa-Client",
        "z": "0c5c460aabd38fc6",
        "d": true,
        "endpoint": "13571b0e22f50a8f",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "useTransport": false,
        "maxChunkCount": "",
        "maxMessageSize": "",
        "receiveBufferSize": "",
        "sendBufferSize": "",
        "name": "",
        "x": 900,
        "y": 660,
        "wires": [
            [
                "b0a3fd052e46252b"
            ],
            []
        ]
    },
    {
        "id": "01d4af60c9fbceab",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1040,
        "y": 260,
        "wires": [
            [
                "df55b8e9b62404d5"
            ]
        ]
    },
    {
        "id": "0b407fa8d9f9974f",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "0c9b7db0f342d582"
            ]
        ]
    },
    {
        "id": "253428cd544f0cf5",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1040,
        "y": 340,
        "wires": [
            [
                "e8e95528ce1de04c"
            ]
        ]
    },
    {
        "id": "b0a3fd052e46252b",
        "type": "join",
        "z": "0c5c460aabd38fc6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "35",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 970,
        "y": 840,
        "wires": [
            [
                "3fee64df7c1ff56c",
                "a3c1d68aa79a1230"
            ]
        ]
    },
    {
        "id": "72615c91b4bce25c",
        "type": "file",
        "z": "0c5c460aabd38fc6",
        "name": "",
        "filename": "C:\\Users\\H.Adapureddi\\Desktop\\database\\parameters_case_00.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1300,
        "y": 560,
        "wires": [
            [
                "2469d7a658f53cd2"
            ]
        ]
    },
    {
        "id": "0314bb26263bf39f",
        "type": "function",
        "z": "0c5c460aabd38fc6",
        "name": "function 30",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Define an array of variable keys\nvar variableKeys = [\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI01\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI02\",\n    \"ns=4;s=|var|c500.Application.GVL_AnalogIn.g_AI_i201KF0_AI03\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStateTransitionCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageCounter\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageRowsCount\",\n    \"ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_iAlarmStorageClear\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderIdentMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetMInertia\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTens\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title\"\n];\n\n// Create an empty array to store values\nvar dataArray = [];\n\n// Loop through variable keys and extract values\nvariableKeys.forEach(function (key) {\n    dataArray.push(payloadObj[key] || 0);\n});\n\n// Set the formatted array as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2469d7a658f53cd2",
        "type": "debug",
        "z": "0c5c460aabd38fc6",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 540,
        "wires": []
    },
    {
        "id": "1c4bb58350b9499d",
        "type": "mysql",
        "z": "0c5c460aabd38fc6",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 1610,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "d7ca34ac144fa5e8",
        "type": "function",
        "z": "0c5c460aabd38fc6",
        "name": "Process Data and Insert into MySQL",
        "func": "// Split the payload by comma\nvar payloadValues = msg.payload.split(',');\n\n// Define table name\nvar tableName = 'new_parameters_x4_remote';\n//var tableName = 'x4_variables_table';\n\n// Define column names and their data types\nvar columns = [];\npayloadValues.forEach(function (value, index) {\n    if (!isNaN(value)) { // Check if the value is a number\n        if (Number.isInteger(parseFloat(value))) {\n            columns.push(`Column_${index} INT`); // If it's an integer, define as INT\n        } else {\n            columns.push(`Column_${index} DOUBLE`); // If it's a float, define as DOUBLE\n        }\n    } else if (/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}Z$/.test(value)) { // Check if the value is a timestamp\n        columns.push(`Column_${index} TIMESTAMP`); // Define as TIMESTAMP\n    } else {\n        columns.push(`Column_${index} VARCHAR(255)`); // If it's a string, define as VARCHAR\n    }\n});\n\n// Define all the variable names (assuming they are in the same order as payloadValues)\nvar variableNames = [\n    \"g_lrX4ActWebTension\",\n    \"g_lrX4SetWebTension\",\n    \"g_dwX4RewinderDriveErrorID\",\n    \"g_dwX4UnwinderDriveErrorID\",\n    \"g_lrX4RewinderActMotorTemp\",\n    \"g_lrX4RewinderActPower\",\n    \"g_lrX4RewinderActTorque\",\n    \"g_lrX4RewinderActVel\",\n    \"g_lrX4RewinderActVoltage\",\n    \"g_lrX4RewinderAxisErrorID\",\n    \"g_lrX4RewinderErrorID\",\n    \"g_lrX4RewinderMotorTempWarning\",\n    \"g_lrX4RewinderSetTorque\",\n    \"g_lrX4RewinderSetVel\",\n    \"g_lrX4UnwinderActDancerPos\",\n    \"g_lrX4UnwinderActMotorTemp\",\n    \"g_lrX4UnwinderActPower\",\n    \"g_lrX4UnwinderActTorque\",\n    \"g_lrX4UnwinderActVel\",\n    \"g_lrX4UnwinderActVoltage\",\n    \"g_lrX4UnwinderAxisErrorID\",\n    \"g_lrX4UnwinderDancerCtrlInfluenceScaled\",\n    \"g_lrX4UnwinderDancerLowLimit\",\n    \"g_lrX4UnwinderDancerPosScaled\",\n    \"g_lrX4UnwinderDancerUpperLimit\",\n    \"g_lrX4UnwinderErrorID\",\n    \"g_lrX4UnwinderMotorTempWarning\",\n    \"g_lrX4UnwinderSetTorque\",\n    \"g_lrX4UnwinderSetVel\",\n    \"x4portal_ticket_alarmcode\",\n    \"x4portal_ticket_componentPath\",\n    \"x4portal_ticket_create\",\n    \"x4portal_ticket_description\",\n    \"x4portal_ticket_priority\",\n    \"x4portal_ticket_title\"\n];\n\n// Construct SQL query to insert data into the table\nvar insertDataQuery = `INSERT INTO ${tableName} (${variableNames.join(', ')}) VALUES (${Array(payloadValues.length).fill('?').join(', ')})`;\n\n// Set the SQL query and payload values in the message object\nmsg.topic = insertDataQuery;\nmsg.payload = payloadValues;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 740,
        "wires": [
            [
                "1c4bb58350b9499d"
            ]
        ]
    },
    {
        "id": "2b9a03ab69b344f7",
        "type": "csv",
        "z": "0c5c460aabd38fc6",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "g_AI_i201KF0_AI01, g_AI_i201KF0_AI02, g_AI_i201KF0_AI03, g_diAlarmStateTransitionCounter, g_diAlarmStorageCounter, g_diAlarmStorageRowsCount, g_iAlarmStorageClear, g_lrX4RewinderActMotorTemp, g_lrX4RewinderActPower, g_lrX4RewinderActTens, g_lrX4RewinderActTorque, g_lrX4RewinderActVel, g_lrX4RewinderActVoltage, g_lrX4RewinderIdentMInertia, g_lrX4RewinderMotorTempWarning, g_lrX4RewinderSetMInertia, g_lrX4RewinderSetTens, g_lrX4RewinderSetTorque, g_lrX4RewinderSetVel, g_lrX4UnwinderActDancerPos, g_lrX4UnwinderActMotorTemp, g_lrX4UnwinderActPower, g_lrX4UnwinderActTorque, g_lrX4UnwinderActVel, g_lrX4UnwinderActVoltage, g_lrX4UnwinderDancerLowLimit, g_lrX4UnwinderDancerUpperLimit, g_lrX4UnwinderMotorTempWarning, g_lrX4UnwinderSetTorque, g_lrX4UnwinderSetVel, x4portal_ticket_alarmcode, x4portal_ticket_componentPath, x4portal_ticket_create, x4portal_ticket_description, x4portal_ticket_priority, x4portal_ticket_title",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "72615c91b4bce25c",
                "d7ca34ac144fa5e8"
            ]
        ]
    },
    {
        "id": "a3c1d68aa79a1230",
        "type": "debug",
        "z": "0c5c460aabd38fc6",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 940,
        "wires": []
    },
    {
        "id": "79355342ede5a5f3",
        "type": "debug",
        "z": "0c5c460aabd38fc6",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 900,
        "wires": []
    },
    {
        "id": "5993c170181c3809",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStateTransitionCounter",
        "datatype": "Int32",
        "value": "",
        "name": "g_diAlarmStateTransitionCounter",
        "x": 1400,
        "y": 160,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "3c26671d81139f63",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageCounter",
        "datatype": "Int32",
        "value": "",
        "name": "g_diAlarmStorageCounter",
        "x": 1430,
        "y": 200,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "f37dd204d1922778",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_iAlarmStorageClear",
        "datatype": "Int16",
        "value": "",
        "name": "g_iAlarmStorageClear",
        "x": 1440,
        "y": 280,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "486aa714b829fa98",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1120,
        "y": 220,
        "wires": [
            [
                "f37dd204d1922778"
            ]
        ]
    },
    {
        "id": "28a9a4d4fff7ccde",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1120,
        "y": 100,
        "wires": [
            [
                "5993c170181c3809"
            ]
        ]
    },
    {
        "id": "86ea996c35ce20eb",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "3c26671d81139f63"
            ]
        ]
    },
    {
        "id": "d24c3fc5224364f4",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.AlarmManager.AlarmGlobals.g_diAlarmStorageRowsCount",
        "datatype": "Int32",
        "value": "",
        "name": "g_diAlarmStorageRowsCount",
        "x": 1410,
        "y": 240,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6cb89ff0a576df7e",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "d24c3fc5224364f4"
            ]
        ]
    },
    {
        "id": "0a25434848861602",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActVoltage",
        "x": 460,
        "y": 740,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "a0b3dc1263abe045",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderIdentMInertia",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderIdentMInertia",
        "x": 1480,
        "y": 1580,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "3d62f5858c60fab2",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActVel",
        "x": 440,
        "y": 700,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "d2bae7fe80f74752",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "3d62f5858c60fab2"
            ]
        ]
    },
    {
        "id": "fde51eee12af6b32",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "0a25434848861602"
            ]
        ]
    },
    {
        "id": "a62b48c7b6e952a3",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 1600,
        "wires": [
            [
                "a0b3dc1263abe045"
            ]
        ]
    },
    {
        "id": "374e70198db9a90a",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActMotorTemp",
        "x": 470,
        "y": 580,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "a8e45a0b01db199c",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActPower",
        "x": 450,
        "y": 620,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "810b0b78d066550d",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActTorque",
        "x": 450,
        "y": 660,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "5295c3763ea29aaf",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 840,
        "wires": [
            [
                "810b0b78d066550d"
            ]
        ]
    },
    {
        "id": "2c76587720c014a1",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "374e70198db9a90a"
            ]
        ]
    },
    {
        "id": "e32230894c52641d",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "a8e45a0b01db199c"
            ]
        ]
    },
    {
        "id": "c4eb3438c50f2c94",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTens",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderActTens",
        "x": 1470,
        "y": 1480,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "c81e5868d89a7dcb",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 1500,
        "wires": [
            [
                "c4eb3438c50f2c94"
            ]
        ]
    },
    {
        "id": "cd5533ecb6e26fa7",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActDancerPos",
        "x": 470,
        "y": 1260,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "a91340698ce2d876",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActMotorTemp",
        "x": 470,
        "y": 1300,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "0206dedd4b9b4f3d",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetVel",
        "x": 500,
        "y": 1220,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "3536b616eacafae9",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1320,
        "wires": [
            [
                "0206dedd4b9b4f3d"
            ]
        ]
    },
    {
        "id": "ab5debde739e51f1",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1360,
        "wires": [
            [
                "cd5533ecb6e26fa7"
            ]
        ]
    },
    {
        "id": "677ddaabf566be75",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1400,
        "wires": [
            [
                "a91340698ce2d876"
            ]
        ]
    },
    {
        "id": "695b5972d0cf2eb3",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderMotorTempWarning",
        "x": 460,
        "y": 1140,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "bbd84e8f41ae72f8",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetMInertia",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetMInertia",
        "x": 1500,
        "y": 1660,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "51f7fb36dd06b383",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetTorque",
        "x": 490,
        "y": 1180,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "bf7b0b487852afc1",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1280,
        "wires": [
            [
                "51f7fb36dd06b383"
            ]
        ]
    },
    {
        "id": "eb157bdf0a3cc3d8",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 1160,
        "wires": [
            [
                "695b5972d0cf2eb3"
            ]
        ]
    },
    {
        "id": "5a5cc37eb6d76967",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 1660,
        "wires": [
            [
                "bbd84e8f41ae72f8"
            ]
        ]
    },
    {
        "id": "319be78e4934f9d9",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTens",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderSetTens",
        "x": 1490,
        "y": 1680,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6dbb5dd47e6a3f80",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 1700,
        "wires": [
            [
                "319be78e4934f9d9"
            ]
        ]
    },
    {
        "id": "01b5fd901e879887",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerUpperLimit",
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "c0d3d87e21d876c1",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderMotorTempWarning",
        "x": 520,
        "y": 1880,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "94cc21725f0b111d",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerLowLimit",
        "x": 530,
        "y": 1660,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "044982723d67fe33",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1600,
        "wires": [
            [
                "94cc21725f0b111d"
            ]
        ]
    },
    {
        "id": "2f7e4a84525c59a2",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1640,
        "wires": [
            [
                "01b5fd901e879887"
            ]
        ]
    },
    {
        "id": "d5e7c0702b27f673",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1680,
        "wires": [
            [
                "c0d3d87e21d876c1"
            ]
        ]
    },
    {
        "id": "0ebfb3d0476c62ec",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActPower",
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "d836844218e7f681",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActTorque",
        "x": 490,
        "y": 1380,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "06b33284180b9b81",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActVoltage",
        "x": 480,
        "y": 1460,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "7d83f623e206a092",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1560,
        "wires": [
            [
                "06b33284180b9b81"
            ]
        ]
    },
    {
        "id": "fd475751ae14965b",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 60,
        "y": 1420,
        "wires": [
            [
                "0ebfb3d0476c62ec"
            ]
        ]
    },
    {
        "id": "1dd2f9a89dbd1930",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1480,
        "wires": [
            [
                "d836844218e7f681"
            ]
        ]
    },
    {
        "id": "7eb1e61ee4a18f97",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderActVel",
        "x": 500,
        "y": 1420,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "9966bd25fb57fc1e",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1520,
        "wires": [
            [
                "7eb1e61ee4a18f97"
            ]
        ]
    },
    {
        "id": "6e2010918ee399ea",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_description",
        "x": 580,
        "y": 2200,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "2d37ad4442a3903e",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_priority",
        "x": 560,
        "y": 2240,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "e889515dcd8ed404",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create",
        "datatype": "Boolean",
        "value": "",
        "name": "x4portal_ticket_create",
        "x": 580,
        "y": 2160,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "3295169baef4919b",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2160,
        "wires": [
            [
                "e889515dcd8ed404"
            ]
        ]
    },
    {
        "id": "92d7fb510d939366",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2200,
        "wires": [
            [
                "6e2010918ee399ea"
            ]
        ]
    },
    {
        "id": "4f72f809402c94e3",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2240,
        "wires": [
            [
                "2d37ad4442a3903e"
            ]
        ]
    },
    {
        "id": "80305a2fc6567be5",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderSetTorque",
        "x": 530,
        "y": 1920,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6d592c03bfa9acd4",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderSetVel",
        "x": 540,
        "y": 1960,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "cc4b46cfbfdfe002",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_componentPath",
        "x": 570,
        "y": 2120,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "7c3c99e4f06a23d0",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2120,
        "wires": [
            [
                "cc4b46cfbfdfe002"
            ]
        ]
    },
    {
        "id": "171d6d2c26640857",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2000,
        "wires": [
            [
                "80305a2fc6567be5"
            ]
        ]
    },
    {
        "id": "77dc511d9864fac1",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2040,
        "wires": [
            [
                "6d592c03bfa9acd4"
            ]
        ]
    },
    {
        "id": "c1427f84179ed9a2",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_alarmcode",
        "x": 590,
        "y": 2080,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6ccafa33dac3deb5",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2080,
        "wires": [
            [
                "c1427f84179ed9a2"
            ]
        ]
    },
    {
        "id": "1fcf79e9677a4741",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title",
        "datatype": "String",
        "value": "",
        "name": "x4portal_ticket_title",
        "x": 570,
        "y": 2280,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6d5b9ff5104921d9",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 2280,
        "wires": [
            [
                "1fcf79e9677a4741"
            ]
        ]
    },
    {
        "id": "18c97c411299e00a",
        "type": "debug",
        "z": "0c5c460aabd38fc6",
        "name": "debug 73",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 860,
        "wires": []
    },
    {
        "id": "25deb6657a6c4250",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4RewinderDriveErrorID",
        "datatype": "Int32",
        "value": "",
        "name": "g_dwX4RewinderDriveErrorID",
        "x": 470,
        "y": 460,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "bb03ca456700c300",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4UnwinderDriveErrorID",
        "datatype": "UInt32",
        "value": "",
        "name": "g_dwX4UnwinderDriveErrorID",
        "x": 470,
        "y": 500,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "fd9471f57a0e340a",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "25deb6657a6c4250"
            ]
        ]
    },
    {
        "id": "fed058006883e23b",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "bb03ca456700c300"
            ]
        ]
    },
    {
        "id": "7c68010e17fe4943",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderAxisErrorID",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderAxisErrorID",
        "x": 460,
        "y": 940,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "8a765c118e332950",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderErrorID",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4RewinderErrorID",
        "x": 450,
        "y": 980,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "cc6d04b75e6efcc6",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1000,
        "wires": [
            [
                "7c68010e17fe4943"
            ]
        ]
    },
    {
        "id": "507ec4b5f98cc037",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "8a765c118e332950"
            ]
        ]
    },
    {
        "id": "852d84eb8262a1df",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderAxisErrorID",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderAxisErrorID",
        "x": 500,
        "y": 1560,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "b3debbbe47e7071c",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1720,
        "wires": [
            [
                "852d84eb8262a1df"
            ]
        ]
    },
    {
        "id": "92c572447d250259",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1780,
        "wires": [
            [
                "72b93edaa3ff82d8"
            ]
        ]
    },
    {
        "id": "72b93edaa3ff82d8",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerCtrlInfluenceScaled",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerCtrlInfluenceScaled",
        "x": 530,
        "y": 1620,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6bcd9de2eaf53882",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerPosScaled",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderDancerPosScaled",
        "x": 540,
        "y": 1700,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "1269ed2b65d29491",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1820,
        "wires": [
            [
                "6bcd9de2eaf53882"
            ]
        ]
    },
    {
        "id": "b4aa83b682832772",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderErrorID",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4UnwinderErrorID",
        "x": 510,
        "y": 1780,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "6bf11981e5c8615c",
        "type": "inject",
        "z": "0c5c460aabd38fc6",
        "name": "test node",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 80,
        "y": 1860,
        "wires": [
            [
                "b4aa83b682832772"
            ]
        ]
    },
    {
        "id": "1b430ad68aec6dad",
        "type": "comment",
        "z": "0c5c460aabd38fc6",
        "name": "Instructions",
        "info": "# topic\nmsg.topic must be \"multiple\"\n\n# payload\nmsg.paylod contains array of nodeId objects\n{\"nodeId\": \"ns=1;s=NodeIdString\"\n",
        "x": 1390,
        "y": 340,
        "wires": []
    },
    {
        "id": "3fee64df7c1ff56c",
        "type": "function",
        "z": "0c5c460aabd38fc6",
        "name": "function 31",
        "func": "// Extract payloads from the combined message\nvar payloadObj = msg.payload;\n\n// Define an array of variable keys\nvar variableKeys = [\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4ActWebTension\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4SetWebTension\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4RewinderDriveErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_dwX4UnwinderDriveErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderAxisErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4RewinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActDancerPos\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActMotorTemp\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActPower\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderActVoltage\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderAxisErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerCtrlInfluenceScaled\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerLowLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerPosScaled\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderDancerUpperLimit\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderErrorID\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderMotorTempWarning\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetTorque\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4UnwinderSetVel\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_alarmcode\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_componentPath\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_create\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_description\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_priority\",\n    \"ns=4;s=|var|c500.Application.GVL_x4remoteVar.x4portal_ticket_title\"\n];\n\n// Create an empty array to store values\nvar dataArray = [];\n\n// Loop through variable keys and extract values\nvariableKeys.forEach(function (key) {\n    dataArray.push(payloadObj[key] || 0);\n});\n\n// Set the formatted array as the payload of the message\nmsg.payload = dataArray;\n\n// Pass the message to the next node in the flow\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 840,
        "wires": [
            [
                "18c97c411299e00a",
                "2b9a03ab69b344f7"
            ]
        ]
    },
    {
        "id": "591a5a4d6225917c",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4ActWebTension",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4ActWebTension",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "1261aae4cd49b543",
        "type": "OpcUa-Item",
        "z": "0c5c460aabd38fc6",
        "item": "ns=4;s=|var|c500.Application.GVL_x4remoteVar.g_lrX4SetWebTension",
        "datatype": "Double",
        "value": "",
        "name": "g_lrX4SetWebTension",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "07f590aec3814a58"
            ]
        ]
    },
    {
        "id": "c8fcece435c6a31e",
        "type": "ui_form",
        "z": "8b946b3fcc466517",
        "name": "Set Threshold Values to deviations",
        "label": "Set Threshold Values",
        "group": "fb3e19ca99d7759c",
        "order": 7,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Temperature Deviation (°C)",
                "value": "Temp Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Power Deviation (%)",
                "value": "Pow Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Tension Deviation (%)",
                "value": "Tension Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Torque Deviation (%)",
                "value": "Torque Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Velocity Deviation (%)",
                "value": "Velocity Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Voltage Deviation (%)",
                "value": "Voltage Max",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Dancer Position Deviation (%)",
                "value": "Dancer Max",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Temp Max": "",
            "Pow Max": "",
            "Tension Max": "",
            "Torque Max": "",
            "Velocity Max": "",
            "Voltage Max": "",
            "Dancer Max": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 300,
        "y": 220,
        "wires": [
            [
                "2da6e06fe59351dd"
            ]
        ]
    },
    {
        "id": "b09ba78ade841b6e",
        "type": "debug",
        "z": "8b946b3fcc466517",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "2da6e06fe59351dd",
        "type": "function",
        "z": "8b946b3fcc466517",
        "name": "function 33",
        "func": "// Assuming msg.payload contains the form data object\nlet formData = msg.payload;\n\n// Construct thresholds object from form data\nlet thresholds = {\n    TempMax: formData['Temp Max'],\n    PowMax: formData['Pow Max'],\n    TensionMax: formData['Tension Max'],\n    TorqueMax: formData['Torque Max'],\n    VelocityMax: formData['Velocity Max'],\n    VoltageMax: formData['Voltage Max'],\n    DancerMax: formData['Dancer Max']\n};\n\n// Store the thresholds object in the global context\nmsg.thresholds = thresholds;\nflow.set(\"thresholds\",msg.thresholds)\n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "b09ba78ade841b6e",
                "1ed7bdba7bd90637"
            ]
        ]
    },
    {
        "id": "1ed7bdba7bd90637",
        "type": "ui_template",
        "z": "8b946b3fcc466517",
        "group": "fb3e19ca99d7759c",
        "name": "template",
        "order": 9,
        "width": 6,
        "height": 5,
        "format": "<div>\n    <h2>Thresholds Table</h2>\n    <table>\n        <tr>\n            <th>Parameter</th>\n            <th>Value</th>\n        </tr>\n        <tr ng-repeat=\"(param, value) in msg.thresholds\">\n            <td>{{param}}</td>\n            <td>{{value}}</td>\n        </tr>\n    </table>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "254cd2c321cf70c6",
        "type": "ui_template",
        "z": "8b946b3fcc466517",
        "group": "fb3e19ca99d7759c",
        "name": "Normal Values",
        "order": 1,
        "width": 6,
        "height": 5,
        "format": "<div>\n    <h2>Normal Values</h2>\n    <table>\n        <tr>\n            <th>Parameter</th>\n            <th>Value</th>\n        </tr>\n        <tr>\n            <td>motorTemperature</td>\n            <td>40 °C</td>\n        </tr>\n        <tr>\n            <td>power</td>\n            <td>25 kW</td>\n        </tr>\n        <tr>\n            <td>tension</td>\n            <td>700 N</td>\n        </tr>\n        <tr>\n            <td>torque</td>\n            <td>60 Nm</td>\n        </tr>\n        <tr>\n            <td>velocity</td>\n            <td>8 m/s</td>\n        </tr>\n        <tr>\n            <td>voltage</td>\n            <td>420 V</td>\n        </tr>\n        <tr>\n            <td>dancerPosition</td>\n            <td>300</td>\n        </tr>\n    </table>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b31189626c52b1ba",
        "type": "mysql",
        "z": "8b946b3fcc466517",
        "mydb": "cf36a658.95efb8",
        "name": "",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "96138941ef7e9c1a"
            ]
        ]
    },
    {
        "id": "1f66f3a272aab4db",
        "type": "function",
        "z": "8b946b3fcc466517",
        "name": "function 34",
        "func": "var query = \"SELECT * FROM new_variables_x4_remote_case01;\";\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 500,
        "wires": [
            [
                "b31189626c52b1ba"
            ]
        ]
    },
    {
        "id": "cde8dbdf70f3a95a",
        "type": "inject",
        "z": "8b946b3fcc466517",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "1f66f3a272aab4db"
            ]
        ]
    },
    {
        "id": "c70036f6b9282c5c",
        "type": "debug",
        "z": "8b946b3fcc466517",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 560,
        "wires": []
    },
    {
        "id": "662c5fc326c44999",
        "type": "function",
        "z": "8b946b3fcc466517",
        "name": "function 35",
        "func": "// Assuming msg.payload contains the array of objects\nlet payload = msg.payload;\n\n// Initialize empty objects to store values of each column\nlet columns = {};\n\n// Iterate over the array of objects\nfor (let i = 0; i < payload.length; i++) {\n    // Access each object\n    let obj = payload[i];\n\n    // Iterate over each property of the object\n    for (let key in obj) {\n        // Check if the property already exists in columns object\n        if (!columns[key]) {\n            // If not, initialize it as an empty array\n            columns[key] = [];\n        }\n\n        // Push the value of the property into the corresponding array\n        columns[key].push(obj[key]);\n    }\n}\n\n// Store the columns object in the global context as deviations\ncontext.global.deviations = columns;\n\n// Construct a new message object with columns as properties\nlet newMsg = {\n    payload: columns,\n    deviations: columns, // Storing payload value in msg.deviations\n};\n\nflow.set(\"deviations\",newMsg.deviations)\n\n// Return the new message object\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "96138941ef7e9c1a",
        "type": "function",
        "z": "8b946b3fcc466517",
        "name": "function 36",
        "func": "var i = 0;\nvar dataArray = msg.payload; // Assuming your array is in msg.payload\n\nif (i < dataArray.length) {\n  msg.payload = dataArray[i]; // Set the data to send\n  i++;\n  return msg;\n} else {\n  // Reset loop or handle end of array (optional)\n  i = 0;\n  // return null to stop flow execution (optional)\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            [
                "c70036f6b9282c5c"
            ]
        ]
    }
]